
pwm_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000947  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040f  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024a  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <turn_on_led>:
#define  F_CPU 16000000ul
#include "mcal/pwm.h"

void turn_on_led()
{
	PORTB|=1<<3;
  90:	85 b1       	in	r24, 0x05	; 5
  92:	88 60       	ori	r24, 0x08	; 8
  94:	85 b9       	out	0x05, r24	; 5
  96:	08 95       	ret

00000098 <turn_off_led>:
}
void turn_off_led()
{
	PORTB&=~(1<<3);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	08 95       	ret

000000a0 <pwm_init>:
}
void pwm_init()
{
	fast_pwm_init();
  a0:	0e 94 89 00 	call	0x112	; 0x112 <fast_pwm_init>
	call_back_compare=turn_on_led;
  a4:	88 e4       	ldi	r24, 0x48	; 72
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <call_back_compare+0x1>
  ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <call_back_compare>
	call_back_overfolw=turn_off_led;
  b0:	8c e4       	ldi	r24, 0x4C	; 76
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	08 95       	ret

000000be <main>:
}
int main(void)
{
	DDRB=0xff;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
	pwm_init();
  c2:	0e 94 50 00 	call	0xa0	; 0xa0 <pwm_init>
    while (1) 
    {
		for(int i=0;i<=250;i+=15)
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	0d c0       	rjmp	.+26     	; 0xe6 <main+0x28>
		{set_pwm_val(i);
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 9a 00 	call	0x134	; 0x134 <set_pwm_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8a e6       	ldi	r24, 0x6A	; 106
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x1a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x24>
  e2:	00 00       	nop
{
	DDRB=0xff;
	pwm_init();
    while (1) 
    {
		for(int i=0;i<=250;i+=15)
  e4:	2f 96       	adiw	r28, 0x0f	; 15
  e6:	cb 3f       	cpi	r28, 0xFB	; 251
  e8:	d1 05       	cpc	r29, r1
  ea:	84 f3       	brlt	.-32     	; 0xcc <main+0xe>
  ec:	ca ef       	ldi	r28, 0xFA	; 250
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	0d c0       	rjmp	.+26     	; 0x10c <main+0x4e>
		{set_pwm_val(i);
		_delay_ms(70);}
		
		for(int i=250;i>=0;i-=15)
		{set_pwm_val(i);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 9a 00 	call	0x134	; 0x134 <set_pwm_val>
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	8a e6       	ldi	r24, 0x6A	; 106
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x40>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x4a>
 108:	00 00       	nop
    {
		for(int i=0;i<=250;i+=15)
		{set_pwm_val(i);
		_delay_ms(70);}
		
		for(int i=250;i>=0;i-=15)
 10a:	2f 97       	sbiw	r28, 0x0f	; 15
 10c:	dd 23       	and	r29, r29
 10e:	8c f7       	brge	.-30     	; 0xf2 <main+0x34>
 110:	da cf       	rjmp	.-76     	; 0xc6 <main+0x8>

00000112 <fast_pwm_init>:
#include "pwm.h"

void fast_pwm_init()
{
	sei();//to enable global intrrupt
 112:	78 94       	sei
	TCCR1A|=1<<0;
 114:	e0 e8       	ldi	r30, 0x80	; 128
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
	 TIMSK1|=1<<0 | 1<<1;
 11e:	ef e6       	ldi	r30, 0x6F	; 111
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	83 60       	ori	r24, 0x03	; 3
 126:	80 83       	st	Z, r24
	TCCR1B|=1<<1 | 1<<3;
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8a 60       	ori	r24, 0x0A	; 10
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <set_pwm_val>:
	
}

void set_pwm_val(char pwm_val)
{
	OCR1A=pwm_val;
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13e:	08 95       	ret

00000140 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	call_back_overfolw();
 162:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	09 95       	icall
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	call_back_compare();
 1b0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <call_back_compare>
 1b4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <call_back_compare+0x1>
 1b8:	09 95       	icall
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
