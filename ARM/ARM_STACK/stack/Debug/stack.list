
stack.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000be8  08000be8  00010be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bf4  08000bf4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf4  08000bf4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf4  08000bf4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000c00  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000c00  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023a9  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000063b  00000000  00000000  000223d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000158  00000000  00000000  00022a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00022b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002952  00000000  00000000  00022c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001507  00000000  00000000  000255e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a452  00000000  00000000  00026ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000450  00000000  00000000  00030fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bd0 	.word	0x08000bd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000bd0 	.word	0x08000bd0

08000170 <en_nvic>:

///////////////generic functions


void en_nvic(uint16_t irq)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(irq)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <en_nvic+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <en_nvic+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:NVIC_IRQ6_EXTI0_EN;break;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <en_nvic+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <en_nvic+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	e029      	b.n	800022a <en_nvic+0xba>
	case 1:NVIC_IRQ7_EXTI1_EN;break;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <en_nvic+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <en_nvic+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	e022      	b.n	800022a <en_nvic+0xba>
	case 2:NVIC_IRQ8_EXTI2_EN;break;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <en_nvic+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <en_nvic+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e01b      	b.n	800022a <en_nvic+0xba>
	case 3:NVIC_IRQ9_EXTI3_EN;break;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <en_nvic+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <en_nvic+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	e014      	b.n	800022a <en_nvic+0xba>
	case 4:NVIC_IRQ10_EXTI4_EN;break;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <en_nvic+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <en_nvic+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	e00d      	b.n	800022a <en_nvic+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:NVIC_IRQ23_EXTI5_9_EN;break;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <en_nvic+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <en_nvic+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
 800021a:	e006      	b.n	800022a <en_nvic+0xba>
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:NVIC_IRQ40_EXTI_10_15_EN;break;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <en_nvic+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <en_nvic+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	bf00      	nop

	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <dis_nvic>:

void dis_nvic(uint16_t irq)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch(irq)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <dis_nvic+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <dis_nvic+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
		{
		case 0:NVIC_IRQ6_EXTI0_dis;break;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <dis_nvic+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <dis_nvic+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e029      	b.n	80002f6 <dis_nvic+0xba>
		case 1:NVIC_IRQ7_EXTI1_dis;break;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <dis_nvic+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <dis_nvic+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	e022      	b.n	80002f6 <dis_nvic+0xba>
		case 2:NVIC_IRQ8_EXTI2_dis;break;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <dis_nvic+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <dis_nvic+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e01b      	b.n	80002f6 <dis_nvic+0xba>
		case 3:NVIC_IRQ9_EXTI3_dis;break;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <dis_nvic+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <dis_nvic+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e014      	b.n	80002f6 <dis_nvic+0xba>
		case 4:NVIC_IRQ10_EXTI4_dis;break;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <dis_nvic+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <dis_nvic+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e00d      	b.n	80002f6 <dis_nvic+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:NVIC_IRQ23_EXTI5_9_dis;break;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <dis_nvic+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <dis_nvic+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e006      	b.n	80002f6 <dis_nvic+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:NVIC_IRQ40_EXTI_10_15_dis;break;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <dis_nvic+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <dis_nvic+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	bf00      	nop

		}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <update>:
//name:mcal_gpio_exti_update
//brief:update exti pins
//param[in]:exti_pin_conf * exti_conf

void update(exti_pin_conf * pin_config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//config gpio to be floting input
	gpio_config pin;
	pin.gpio_mode=GPIO_MODE_INPUT_FLO;
 8000310:	2301      	movs	r3, #1
 8000312:	72bb      	strb	r3, [r7, #10]
	pin.gpio_pin_number=pin_config->exti_pin.gpio_pin;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	891b      	ldrh	r3, [r3, #8]
 8000318:	b21b      	sxth	r3, r3
 800031a:	813b      	strh	r3, [r7, #8]
	mcal_gpio_init(pin_config->exti_pin.gpio_port, &pin);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	4611      	mov	r1, r2
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fb61 	bl	80009ee <mcal_gpio_init>

	//update afio to match pin
	////afio index
	uint8_t EXTICR_index=pin_config->exti_pin.exti_line_number/4;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	b29b      	uxth	r3, r3
 8000334:	73fb      	strb	r3, [r7, #15]
	////afio position
	uint8_t EXTICR_pos=(pin_config->exti_pin.exti_line_number %4)*4;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0303 	and.w	r3, r3, #3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	73bb      	strb	r3, [r7, #14]
	//clear 4 bits
	AFIO_CONFIG->EXTICR[EXTICR_index]&=~(0xf<<EXTICR_pos);
 8000346:	4a5c      	ldr	r2, [pc, #368]	; (80004b8 <update+0x1b0>)
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	3302      	adds	r3, #2
 800034c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	210f      	movs	r1, #15
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	4956      	ldr	r1, [pc, #344]	; (80004b8 <update+0x1b0>)
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	4002      	ands	r2, r0
 8000362:	3302      	adds	r3, #2
 8000364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO_CONFIG->EXTICR[EXTICR_index]|= (afio_gpio_exti_mapping(pin_config->exti_pin.gpio_port)<<EXTICR_pos);
 8000368:	4a53      	ldr	r2, [pc, #332]	; (80004b8 <update+0x1b0>)
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	3302      	adds	r3, #2
 800036e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4951      	ldr	r1, [pc, #324]	; (80004bc <update+0x1b4>)
 8000378:	428b      	cmp	r3, r1
 800037a:	d00f      	beq.n	800039c <update+0x94>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	494f      	ldr	r1, [pc, #316]	; (80004c0 <update+0x1b8>)
 8000382:	428b      	cmp	r3, r1
 8000384:	d008      	beq.n	8000398 <update+0x90>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	494e      	ldr	r1, [pc, #312]	; (80004c4 <update+0x1bc>)
 800038c:	428b      	cmp	r3, r1
 800038e:	d101      	bne.n	8000394 <update+0x8c>
 8000390:	2302      	movs	r3, #2
 8000392:	e004      	b.n	800039e <update+0x96>
 8000394:	2300      	movs	r3, #0
 8000396:	e002      	b.n	800039e <update+0x96>
 8000398:	2301      	movs	r3, #1
 800039a:	e000      	b.n	800039e <update+0x96>
 800039c:	2300      	movs	r3, #0
 800039e:	7bb9      	ldrb	r1, [r7, #14]
 80003a0:	408b      	lsls	r3, r1
 80003a2:	4618      	mov	r0, r3
 80003a4:	4944      	ldr	r1, [pc, #272]	; (80004b8 <update+0x1b0>)
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	4302      	orrs	r2, r0
 80003aa:	3302      	adds	r3, #2
 80003ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//update rising and falling edge
	EXTI_macros->RTSR&=~(0xf<<pin_config->exti_pin.exti_line_number);
 80003b0:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <update+0x1c0>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	8812      	ldrh	r2, [r2, #0]
 80003b8:	4611      	mov	r1, r2
 80003ba:	220f      	movs	r2, #15
 80003bc:	408a      	lsls	r2, r1
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <update+0x1c0>)
 80003c4:	400b      	ands	r3, r1
 80003c6:	6093      	str	r3, [r2, #8]
	EXTI_macros->FTSR&=~(0xf<<pin_config->exti_pin.exti_line_number);
 80003c8:	4b3f      	ldr	r3, [pc, #252]	; (80004c8 <update+0x1c0>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	8812      	ldrh	r2, [r2, #0]
 80003d0:	4611      	mov	r1, r2
 80003d2:	220f      	movs	r2, #15
 80003d4:	408a      	lsls	r2, r1
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a3b      	ldr	r2, [pc, #236]	; (80004c8 <update+0x1c0>)
 80003dc:	400b      	ands	r3, r1
 80003de:	60d3      	str	r3, [r2, #12]

	if(pin_config->trigger_case==trigger_rising)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7b1b      	ldrb	r3, [r3, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d10b      	bne.n	8000400 <update+0xf8>
	{
		EXTI_macros->RTSR|=(1<<pin_config->exti_pin.exti_line_number);
 80003e8:	4b37      	ldr	r3, [pc, #220]	; (80004c8 <update+0x1c0>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	8812      	ldrh	r2, [r2, #0]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <update+0x1c0>)
 80003fa:	430b      	orrs	r3, r1
 80003fc:	6093      	str	r3, [r2, #8]
 80003fe:	e029      	b.n	8000454 <update+0x14c>
	}
	else if(pin_config->trigger_case==trigger_falling)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7b1b      	ldrb	r3, [r3, #12]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d10b      	bne.n	8000420 <update+0x118>
	{
		EXTI_macros->FTSR|=(1<<pin_config->exti_pin.exti_line_number);
 8000408:	4b2f      	ldr	r3, [pc, #188]	; (80004c8 <update+0x1c0>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	8812      	ldrh	r2, [r2, #0]
 8000410:	4611      	mov	r1, r2
 8000412:	2201      	movs	r2, #1
 8000414:	408a      	lsls	r2, r1
 8000416:	4611      	mov	r1, r2
 8000418:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <update+0x1c0>)
 800041a:	430b      	orrs	r3, r1
 800041c:	60d3      	str	r3, [r2, #12]
 800041e:	e019      	b.n	8000454 <update+0x14c>
	}
	else if(pin_config->trigger_case==trigger_rising_falling)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	7b1b      	ldrb	r3, [r3, #12]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d115      	bne.n	8000454 <update+0x14c>
	{
		EXTI_macros->RTSR|=(1<<pin_config->exti_pin.exti_line_number);
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <update+0x1c0>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	8812      	ldrh	r2, [r2, #0]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	4611      	mov	r1, r2
 8000438:	4a23      	ldr	r2, [pc, #140]	; (80004c8 <update+0x1c0>)
 800043a:	430b      	orrs	r3, r1
 800043c:	6093      	str	r3, [r2, #8]
		EXTI_macros->FTSR|=(1<<pin_config->exti_pin.exti_line_number);
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <update+0x1c0>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	8812      	ldrh	r2, [r2, #0]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4611      	mov	r1, r2
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <update+0x1c0>)
 8000450:	430b      	orrs	r3, r1
 8000452:	60d3      	str	r3, [r2, #12]
	}

	//update irq
	g_irq_call_back[pin_config->exti_pin.exti_line_number]=pin_config->irq_call_back;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <update+0x1c4>)
 8000460:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//enable and disable irq
	if(pin_config->irq_state == irq_en){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7b5b      	ldrb	r3, [r3, #13]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d110      	bne.n	800048e <update+0x186>
	EXTI_macros->IMR|=(1<< pin_config->exti_pin.exti_line_number);
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <update+0x1c0>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	8812      	ldrh	r2, [r2, #0]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <update+0x1c0>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
	en_nvic(pin_config->exti_pin.exti_line_number);}
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe72 	bl	8000170 <en_nvic>
	else{
		EXTI_macros->IMR&=~(1<<pin_config->exti_pin.exti_line_number);
		dis_nvic(pin_config->exti_pin.exti_line_number);}
}
 800048c:	e010      	b.n	80004b0 <update+0x1a8>
		EXTI_macros->IMR&=~(1<<pin_config->exti_pin.exti_line_number);
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <update+0x1c0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	8812      	ldrh	r2, [r2, #0]
 8000496:	4611      	mov	r1, r2
 8000498:	2201      	movs	r2, #1
 800049a:	408a      	lsls	r2, r1
 800049c:	43d2      	mvns	r2, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <update+0x1c0>)
 80004a2:	400b      	ands	r3, r1
 80004a4:	6013      	str	r3, [r2, #0]
		dis_nvic(pin_config->exti_pin.exti_line_number);}
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fec6 	bl	800023c <dis_nvic>
}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010000 	.word	0x40010000
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010400 	.word	0x40010400
 80004cc:	20000020 	.word	0x20000020

080004d0 <mcal_gpio_exti_init>:
{
	update(exti_conf);
}

void mcal_gpio_exti_init(exti_pin_conf * exti_conf)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	update(exti_conf);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff15 	bl	8000308 <update>

}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler (void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//clear pr reg
	EXTI_macros->PR|=1<<0;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6153      	str	r3, [r2, #20]
	g_irq_call_back[0]();
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI0_IRQHandler+0x20>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4798      	blx	r3
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	20000020 	.word	0x20000020

0800050c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//clear pr reg
	EXTI_macros->PR|=1<<1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6153      	str	r3, [r2, #20]
	g_irq_call_back[1]();
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <EXTI1_IRQHandler+0x20>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4798      	blx	r3
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010400 	.word	0x40010400
 800052c:	20000020 	.word	0x20000020

08000530 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	//clear pr reg
	EXTI_macros->PR|=1<<2;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <EXTI2_IRQHandler+0x1c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <EXTI2_IRQHandler+0x1c>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6153      	str	r3, [r2, #20]
	g_irq_call_back[2]();
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <EXTI2_IRQHandler+0x20>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	4798      	blx	r3
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	20000020 	.word	0x20000020

08000554 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	//clear pr reg
	EXTI_macros->PR|=1<<3;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6153      	str	r3, [r2, #20]
	g_irq_call_back[3]();
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <EXTI3_IRQHandler+0x20>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4798      	blx	r3
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400
 8000574:	20000020 	.word	0x20000020

08000578 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	//clear pr reg
	EXTI_macros->PR|=1<<4;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6153      	str	r3, [r2, #20]
	g_irq_call_back[4]();
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <EXTI4_IRQHandler+0x20>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	4798      	blx	r3
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400
 8000598:	20000020 	.word	0x20000020

0800059c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if(EXTI_macros->PR & 1<<5){EXTI_macros->PR|=1<<5;g_irq_call_back[5]();}
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f003 0320 	and.w	r3, r3, #32
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <EXTI9_5_IRQHandler+0x22>
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6153      	str	r3, [r2, #20]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<6){EXTI_macros->PR|=1<<6;g_irq_call_back[6]();}
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <EXTI9_5_IRQHandler+0x40>
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<7){EXTI_macros->PR|=1<<7;g_irq_call_back[7]();}
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <EXTI9_5_IRQHandler+0x5e>
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<8){EXTI_macros->PR|=1<<8;g_irq_call_back[7]();}
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <EXTI9_5_IRQHandler+0x7c>
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<9){EXTI_macros->PR|=1<<9;g_irq_call_back[9]();}
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <EXTI9_5_IRQHandler+0x9a>
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	4798      	blx	r3
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400
 8000640:	20000020 	.word	0x20000020

08000644 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if(EXTI_macros->PR & 1<<10){EXTI_macros->PR|=1<<10;g_irq_call_back[10]();}
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <EXTI15_10_IRQHandler+0x22>
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	6153      	str	r3, [r2, #20]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<11){EXTI_macros->PR|=1<<11;g_irq_call_back[11]();}
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <EXTI15_10_IRQHandler+0x40>
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<12){EXTI_macros->PR|=1<<12;g_irq_call_back[12]();}
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <EXTI15_10_IRQHandler+0x5e>
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<13){EXTI_macros->PR|=1<<13;g_irq_call_back[13]();}
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <EXTI15_10_IRQHandler+0x7c>
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006be:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<14){EXTI_macros->PR|=1<<14;g_irq_call_back[14]();}
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <EXTI15_10_IRQHandler+0x9a>
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6153      	str	r3, [r2, #20]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006dc:	4798      	blx	r3
	if(EXTI_macros->PR & 1<<15){EXTI_macros->PR|=1<<15;g_irq_call_back[15]();}
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <EXTI15_10_IRQHandler+0xb8>
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006fa:	4798      	blx	r3
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010400 	.word	0x40010400
 8000704:	20000020 	.word	0x20000020

08000708 <SVC_Handler>:
unsigned int _e_pspb;
//flags
uint8_t taska_flag,taskb_flag,irq_flag;

void SVC_Handler()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	//enable privilige mode
	__asm("mrs r3,CONTROL   \n\t"
 800070c:	f3ef 8314 	mrs	r3, CONTROL
 8000710:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000718:	f383 8814 	msr	CONTROL, r3
			"lsr r3,r3,#0x1 \n\t"
			"lsl r3,r3,#0x1 \n\t"
			"msr CONTROL,r3");
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <taska>:

int taska (int a,int b,int c)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	return a+b+c;
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	441a      	add	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
}
 800073a:	4618      	mov	r0, r3
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <taskb>:

int taskb (int a,int b,int c,int d )
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	603b      	str	r3, [r7, #0]
	return a+b+c+d;
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	441a      	add	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	441a      	add	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	4413      	add	r3, r2
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <main_os>:
void main_os()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	//main stack
	_e_msp=_s_msp - 512;
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <main_os+0xe4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000778:	4a36      	ldr	r2, [pc, #216]	; (8000854 <main_os+0xe8>)
 800077a:	6013      	str	r3, [r2, #0]
	//task a
	_s_pspa = _e_msp - 8;
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <main_os+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b08      	subs	r3, #8
 8000782:	4a35      	ldr	r2, [pc, #212]	; (8000858 <main_os+0xec>)
 8000784:	6013      	str	r3, [r2, #0]
	_e_pspa = _s_pspa - taska_stack_size ;
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <main_os+0xec>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3b64      	subs	r3, #100	; 0x64
 800078c:	4a33      	ldr	r2, [pc, #204]	; (800085c <main_os+0xf0>)
 800078e:	6013      	str	r3, [r2, #0]
	//task b
	_s_pspb = _e_pspa - 8;
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <main_os+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b08      	subs	r3, #8
 8000796:	4a32      	ldr	r2, [pc, #200]	; (8000860 <main_os+0xf4>)
 8000798:	6013      	str	r3, [r2, #0]
	_e_pspb = _s_pspb - taskb_stack_size ;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <main_os+0xf4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3b64      	subs	r3, #100	; 0x64
 80007a0:	4a30      	ldr	r2, [pc, #192]	; (8000864 <main_os+0xf8>)
 80007a2:	6013      	str	r3, [r2, #0]


	while(1)
	{
		__asm("nop");
 80007a4:	bf00      	nop
		if(taska_flag == 1)
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <main_os+0xfc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d125      	bne.n	80007fa <main_os+0x8e>
		{
			//set psp reg = _s_psp_A
			os_set_psp(_s_pspa);
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <main_os+0xec>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f380 8809 	msr	PSP, r0
			//sp-> psp
			os_switch_sp_to_psp;
 80007b8:	f3ef 8014 	mrs	r0, CONTROL
 80007bc:	f04f 0102 	mov.w	r1, #2
 80007c0:	ea40 0001 	orr.w	r0, r0, r1
 80007c4:	f380 8814 	msr	CONTROL, r0
			//switch from privilege to unprivilege
			__asm("mrs r0,control \n\t"
 80007c8:	f3ef 8014 	mrs	r0, CONTROL
 80007cc:	f040 0001 	orr.w	r0, r0, #1
 80007d0:	f380 8814 	msr	CONTROL, r0
					"orr r0,#0x01 \n\t"
					"msr control,r0"
			);
			taska_flag=taska(2, 3, 5);
 80007d4:	2205      	movs	r2, #5
 80007d6:	2103      	movs	r1, #3
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff ffa3 	bl	8000724 <taska>
 80007de:	4603      	mov	r3, r0
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <main_os+0xfc>)
 80007e4:	701a      	strb	r2, [r3, #0]
			//switch from unprivilege to privilege
			os_generate_exception;
 80007e6:	df03      	svc	3
			////sp-> msp
			os_switch_sp_to_msp;
 80007e8:	f3ef 8014 	mrs	r0, CONTROL
 80007ec:	f04f 0105 	mov.w	r1, #5
 80007f0:	ea00 0001 	and.w	r0, r0, r1
 80007f4:	f380 8814 	msr	CONTROL, r0
 80007f8:	e7d4      	b.n	80007a4 <main_os+0x38>
		}
		else if(taskb_flag == 1)
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <main_os+0x100>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d1d0      	bne.n	80007a4 <main_os+0x38>
		{
			//set psp reg = _s_psp_b
			os_set_psp(_s_pspb);
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <main_os+0xf4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f380 8809 	msr	PSP, r0
			//sp-> psp
			os_switch_sp_to_psp;
 800080c:	f3ef 8014 	mrs	r0, CONTROL
 8000810:	f04f 0102 	mov.w	r1, #2
 8000814:	ea40 0001 	orr.w	r0, r0, r1
 8000818:	f380 8814 	msr	CONTROL, r0
			//switch from privilege to unprivilege
			__asm("mrs r0,control \n\t"
 800081c:	f3ef 8014 	mrs	r0, CONTROL
 8000820:	f040 0001 	orr.w	r0, r0, #1
 8000824:	f380 8814 	msr	CONTROL, r0
					"orr r0,#0x01 \n\t"
					"msr control,r0"
			);
			taskb_flag=taskb(1, 2, 3, 5);
 8000828:	2305      	movs	r3, #5
 800082a:	2203      	movs	r2, #3
 800082c:	2102      	movs	r1, #2
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff88 	bl	8000744 <taskb>
 8000834:	4603      	mov	r3, r0
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <main_os+0x100>)
 800083a:	701a      	strb	r2, [r3, #0]
			//switch from unprivilege to privilege
			os_generate_exception;
 800083c:	df03      	svc	3
			////sp-> msp
			os_switch_sp_to_msp;
 800083e:	f3ef 8014 	mrs	r0, CONTROL
 8000842:	f04f 0105 	mov.w	r1, #5
 8000846:	ea00 0001 	and.w	r0, r0, r1
 800084a:	f380 8814 	msr	CONTROL, r0
		__asm("nop");
 800084e:	e7a9      	b.n	80007a4 <main_os+0x38>
 8000850:	20000000 	.word	0x20000000
 8000854:	20000070 	.word	0x20000070
 8000858:	20000064 	.word	0x20000064
 800085c:	20000068 	.word	0x20000068
 8000860:	2000006c 	.word	0x2000006c
 8000864:	20000060 	.word	0x20000060
 8000868:	2000005c 	.word	0x2000005c
 800086c:	2000005d 	.word	0x2000005d

08000870 <irq_fun>:
		}

	}
}
void irq_fun()
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	if(irq_flag == 0)
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <irq_fun+0x38>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d106      	bne.n	800088a <irq_fun+0x1a>
	{
		taska_flag = 1;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <irq_fun+0x3c>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
		irq_flag = 1 ;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <irq_fun+0x38>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
	{
		taskb_flag = 1 ;
		irq_flag = 0;
	}

}
 8000888:	e009      	b.n	800089e <irq_fun+0x2e>
	else if(irq_flag == 1 )
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <irq_fun+0x38>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d105      	bne.n	800089e <irq_fun+0x2e>
		taskb_flag = 1 ;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <irq_fun+0x40>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		irq_flag = 0;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <irq_fun+0x38>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	2000005e 	.word	0x2000005e
 80008ac:	2000005c 	.word	0x2000005c
 80008b0:	2000005d 	.word	0x2000005d

080008b4 <clk_init>:

void clk_init()
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <clk_init+0x24>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <clk_init+0x24>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <clk_init+0x24>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <clk_init+0x24>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
	//AFIO_CLK_EN;

}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40021000 	.word	0x40021000

080008dc <main>:

int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
	clk_init();
 80008e2:	f7ff ffe7 	bl	80008b4 <clk_init>
	//gpio conf
	gpio_config gpio_conf;
	gpio_conf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80008e6:	2304      	movs	r3, #4
 80008e8:	75bb      	strb	r3, [r7, #22]
	gpio_conf.gpio_pin_number=GPIO_PIN_0;
 80008ea:	2301      	movs	r3, #1
 80008ec:	82bb      	strh	r3, [r7, #20]
	gpio_conf.gpio_speed=max_speed_2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	75fb      	strb	r3, [r7, #23]
	mcal_gpio_init(GPIOB, &gpio_conf);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <main+0x50>)
 80008fa:	f000 f878 	bl	80009ee <mcal_gpio_init>
	//exti config
	exti_pin_conf config;
	config.exti_pin=EXTI0A0;
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <main+0x54>)
 8000900:	463b      	mov	r3, r7
 8000902:	ca07      	ldmia	r2, {r0, r1, r2}
 8000904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	config.irq_state=irq_en;
 8000908:	2301      	movs	r3, #1
 800090a:	737b      	strb	r3, [r7, #13]
	config.trigger_case=trigger_rising;
 800090c:	2300      	movs	r3, #0
 800090e:	733b      	strb	r3, [r7, #12]
	config.irq_call_back=irq_fun;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <main+0x58>)
 8000912:	613b      	str	r3, [r7, #16]
	mcal_gpio_exti_init(&config);
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fdda 	bl	80004d0 <mcal_gpio_exti_init>
	mcal_gpio_write_pin(GPIOB, GPIO_PIN_0, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <main+0x50>)
 8000922:	f000 f8e9 	bl	8000af8 <mcal_gpio_write_pin>

	main_os();
 8000926:	f7ff ff21 	bl	800076c <main_os>

	for(;;);
 800092a:	e7fe      	b.n	800092a <main+0x4e>
 800092c:	40010c00 	.word	0x40010c00
 8000930:	08000be8 	.word	0x08000be8
 8000934:	08000871 	.word	0x08000871

08000938 <get_pos>:
 *  Created on: Sep 5, 2023
 *      Author: Alfanan02
 */
#include "inc/stm32f103x6_gpio_driver.h"
short get_pos(short pin_number)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 8000942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000946:	2b80      	cmp	r3, #128	; 0x80
 8000948:	d03b      	beq.n	80009c2 <get_pos+0x8a>
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	dc11      	bgt.n	8000972 <get_pos+0x3a>
 800094e:	2b08      	cmp	r3, #8
 8000950:	d02f      	beq.n	80009b2 <get_pos+0x7a>
 8000952:	2b08      	cmp	r3, #8
 8000954:	dc06      	bgt.n	8000964 <get_pos+0x2c>
 8000956:	2b02      	cmp	r3, #2
 8000958:	d027      	beq.n	80009aa <get_pos+0x72>
 800095a:	2b04      	cmp	r3, #4
 800095c:	d027      	beq.n	80009ae <get_pos+0x76>
 800095e:	2b01      	cmp	r3, #1
 8000960:	d021      	beq.n	80009a6 <get_pos+0x6e>
 8000962:	e03e      	b.n	80009e2 <get_pos+0xaa>
 8000964:	2b20      	cmp	r3, #32
 8000966:	d028      	beq.n	80009ba <get_pos+0x82>
 8000968:	2b40      	cmp	r3, #64	; 0x40
 800096a:	d028      	beq.n	80009be <get_pos+0x86>
 800096c:	2b10      	cmp	r3, #16
 800096e:	d022      	beq.n	80009b6 <get_pos+0x7e>
 8000970:	e037      	b.n	80009e2 <get_pos+0xaa>
 8000972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000976:	d02c      	beq.n	80009d2 <get_pos+0x9a>
 8000978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800097c:	dc09      	bgt.n	8000992 <get_pos+0x5a>
 800097e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000982:	d022      	beq.n	80009ca <get_pos+0x92>
 8000984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000988:	d021      	beq.n	80009ce <get_pos+0x96>
 800098a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098e:	d01a      	beq.n	80009c6 <get_pos+0x8e>
 8000990:	e027      	b.n	80009e2 <get_pos+0xaa>
 8000992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000996:	d020      	beq.n	80009da <get_pos+0xa2>
 8000998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800099c:	d01f      	beq.n	80009de <get_pos+0xa6>
 800099e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009a2:	d018      	beq.n	80009d6 <get_pos+0x9e>
 80009a4:	e01d      	b.n	80009e2 <get_pos+0xaa>
	{
	case GPIO_PIN_0 : return 0;break;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e01c      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_1 : return 1;break;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e01a      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_2 : return 2;break;
 80009ae:	2302      	movs	r3, #2
 80009b0:	e018      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_3 : return 3;break;
 80009b2:	2303      	movs	r3, #3
 80009b4:	e016      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_4 : return 4;break;
 80009b6:	2304      	movs	r3, #4
 80009b8:	e014      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_5 : return 5;break;
 80009ba:	2305      	movs	r3, #5
 80009bc:	e012      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_6 : return 6;break;
 80009be:	2306      	movs	r3, #6
 80009c0:	e010      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_7 : return 7;break;
 80009c2:	2307      	movs	r3, #7
 80009c4:	e00e      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_8 : return 0;break;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e00c      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_9 : return 1;break;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00a      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_10 : return 2;break;
 80009ce:	2302      	movs	r3, #2
 80009d0:	e008      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_11 : return 3;break;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e006      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_12 : return 4;break;
 80009d6:	2304      	movs	r3, #4
 80009d8:	e004      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_13: return 5;break;
 80009da:	2305      	movs	r3, #5
 80009dc:	e002      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_14 : return 6;break;
 80009de:	2306      	movs	r3, #6
 80009e0:	e000      	b.n	80009e4 <get_pos+0xac>
	case GPIO_PIN_15 : return 7;break;


	}
return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <mcal_gpio_init>:
//brief:intialize pins
//param[in]:gpiox: to select port and pin
//param[in]:config:to config pin
//
void mcal_gpio_init(GPIO *gpiox,gpio_config *config)
{
 80009ee:	b590      	push	{r4, r7, lr}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
	short PIN_config;
	volatile unsigned int *config_reg=NULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
	config_reg=(config->gpio_pin_number<GPIO_PIN_8)?&gpiox->CRL:&gpiox->CRH;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	2bff      	cmp	r3, #255	; 0xff
 8000a04:	dc01      	bgt.n	8000a0a <mcal_gpio_init+0x1c>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	e001      	b.n	8000a0e <mcal_gpio_init+0x20>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	60bb      	str	r3, [r7, #8]
	(*config_reg)&=~(0xf<<(get_pos(config->gpio_pin_number)*4));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff8e 	bl	8000938 <get_pos>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	601a      	str	r2, [r3, #0]

	if( config->gpio_mode==GPIO_MODE_OUTPUT_AF_OD ||config->gpio_mode==GPIO_MODE_OUTPUT_AF_PP||config->gpio_mode== GPIO_MODE_OUTPUT_OD||config->gpio_mode==GPIO_MODE_OUTPUT_PP)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	d00b      	beq.n	8000a52 <mcal_gpio_init+0x64>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	789b      	ldrb	r3, [r3, #2]
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d007      	beq.n	8000a52 <mcal_gpio_init+0x64>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	2b05      	cmp	r3, #5
 8000a48:	d003      	beq.n	8000a52 <mcal_gpio_init+0x64>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d10d      	bne.n	8000a6e <mcal_gpio_init+0x80>
		{PIN_config = ((config->gpio_mode - 4)<<2 ) | ((config->gpio_speed) & (0X0F));}
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	789b      	ldrb	r3, [r3, #2]
 8000a56:	3b04      	subs	r3, #4
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	78db      	ldrb	r3, [r3, #3]
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	e02f      	b.n	8000ace <mcal_gpio_init+0xe0>


	else
	{
		if(config->gpio_mode==GPIO_MODE_ANALOG ||config->gpio_mode==GPIO_MODE_INPUT_FLO)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	789b      	ldrb	r3, [r3, #2]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <mcal_gpio_init+0x90>
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <mcal_gpio_init+0x9a>
		{
			PIN_config=config->gpio_mode<<2;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	789b      	ldrb	r3, [r3, #2]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	81fb      	strh	r3, [r7, #14]
 8000a86:	e022      	b.n	8000ace <mcal_gpio_init+0xe0>

		}
		else if(config->gpio_mode== GPIO_MODE_AF_INPUT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d102      	bne.n	8000a96 <mcal_gpio_init+0xa8>
		{
			PIN_config=GPIO_MODE_INPUT_FLO<<2;
 8000a90:	2304      	movs	r3, #4
 8000a92:	81fb      	strh	r3, [r7, #14]
 8000a94:	e01b      	b.n	8000ace <mcal_gpio_init+0xe0>
		}
		else
		{

			PIN_config=GPIO_MODE_INPUT_PU<<2;
 8000a96:	2308      	movs	r3, #8
 8000a98:	81fb      	strh	r3, [r7, #14]
			if(config->gpio_mode == GPIO_MODE_INPUT_PU)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d108      	bne.n	8000ab4 <mcal_gpio_init+0xc6>
			{
				gpiox->ODR|=(config->gpio_pin_number);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	e00c      	b.n	8000ace <mcal_gpio_init+0xe0>

			}
			else if(config->gpio_mode == GPIO_MODE_INPUT_PD)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d108      	bne.n	8000ace <mcal_gpio_init+0xe0>
			{
				gpiox->ODR&=~(config->gpio_pin_number);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ac6:	43d2      	mvns	r2, r2
 8000ac8:	401a      	ands	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]


	}


	*config_reg|=(PIN_config<<(get_pos(config->gpio_pin_number)*4));
 8000ace:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff2d 	bl	8000938 <get_pos>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	fa04 f203 	lsl.w	r2, r4, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <mcal_gpio_write_pin>:
	return port_status;
}


void mcal_gpio_write_pin(GPIO *gpiox,unsigned short pin_number,char val)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
		if(val!=0)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <mcal_gpio_write_pin+0x24>
			gpiox->ODR|=pin_number;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60da      	str	r2, [r3, #12]
		else
			gpiox->ODR&=~pin_number;
}
 8000b1a:	e006      	b.n	8000b2a <mcal_gpio_write_pin+0x32>
			gpiox->ODR&=~pin_number;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	887a      	ldrh	r2, [r7, #2]
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	401a      	ands	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60da      	str	r2, [r3, #12]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f000 f811 	bl	8000b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff feb9 	bl	80008dc <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b78:	08000bfc 	.word	0x08000bfc
  ldr r2, =_sbss
 8000b7c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b80:	20000074 	.word	0x20000074

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <__libc_init_array>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	4e0c      	ldr	r6, [pc, #48]	; (8000bc0 <__libc_init_array+0x38>)
 8000b8e:	4c0d      	ldr	r4, [pc, #52]	; (8000bc4 <__libc_init_array+0x3c>)
 8000b90:	1ba4      	subs	r4, r4, r6
 8000b92:	10a4      	asrs	r4, r4, #2
 8000b94:	42a5      	cmp	r5, r4
 8000b96:	d109      	bne.n	8000bac <__libc_init_array+0x24>
 8000b98:	f000 f81a 	bl	8000bd0 <_init>
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	4e0a      	ldr	r6, [pc, #40]	; (8000bc8 <__libc_init_array+0x40>)
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <__libc_init_array+0x44>)
 8000ba2:	1ba4      	subs	r4, r4, r6
 8000ba4:	10a4      	asrs	r4, r4, #2
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	d105      	bne.n	8000bb6 <__libc_init_array+0x2e>
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bb0:	4798      	blx	r3
 8000bb2:	3501      	adds	r5, #1
 8000bb4:	e7ee      	b.n	8000b94 <__libc_init_array+0xc>
 8000bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bba:	4798      	blx	r3
 8000bbc:	3501      	adds	r5, #1
 8000bbe:	e7f2      	b.n	8000ba6 <__libc_init_array+0x1e>
 8000bc0:	08000bf4 	.word	0x08000bf4
 8000bc4:	08000bf4 	.word	0x08000bf4
 8000bc8:	08000bf4 	.word	0x08000bf4
 8000bcc:	08000bf8 	.word	0x08000bf8

08000bd0 <_init>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr

08000bdc <_fini>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr
