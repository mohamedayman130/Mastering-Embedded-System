
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f6  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000814  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a3  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LCD_ENABLE>:
{
	while(*text !='\0')
	{
		LCD_WRITE_CHAR(*text++);
	}
}
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8b bb       	out	0x1b, r24	; 27
  82:	83 ed       	ldi	r24, 0xD3	; 211
  84:	90 e3       	ldi	r25, 0x30	; 48
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_ENABLE+0xa>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_ENABLE+0x10>
  8c:	00 00       	nop
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	8b bb       	out	0x1b, r24	; 27
  94:	08 95       	ret

00000096 <LCD_WRITE_COMMAND>:
  96:	88 bb       	out	0x18, r24	; 24
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_ENABLE>
  a8:	08 95       	ret

000000aa <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	87 ea       	ldi	r24, 0xA7	; 167
  ac:	91 e6       	ldi	r25, 0x61	; 97
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_INIT+0x4>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_INIT+0xa>
  b4:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(100);
	GPIO_DDRA=0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bb       	out	0x1a, r24	; 26
	GPIO_DDRB=0XFF;
  ba:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(1<<RW | 1<<RS | 1<<EN );
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE();
  c2:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_ENABLE>
	LCD_WRITE_COMMAND(0x0e);//to turn on lcd and cursor
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x38);//2 lines and 5×7 matrix
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x80);//to start from first row
  d2:	80 e8       	ldi	r24, 0x80	; 128
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_WRITE_COMMAND>
  d8:	08 95       	ret

000000da <main>:



int main(void)
{
	LCD_INIT();
  da:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_INIT>
    uart_init();
  de:	0e 94 75 00 	call	0xea	; 0xea <uart_init>
	char y,count=0;
		uart_Send(300);
  e2:	8c e2       	ldi	r24, 0x2C	; 44
  e4:	0e 94 7e 00 	call	0xfc	; 0xfc <uart_Send>
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0xe>

000000ea <uart_init>:
#include "uart.h"
void uart_init()
{
	UBRRL=51;
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	89 b9       	out	0x09, r24	; 9
	UCSRB|=1<<3;
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8a b9       	out	0x0a, r24	; 10
	UCSRB|=1<<4;
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	08 95       	ret

000000fc <uart_Send>:
}
void uart_Send(char x)
{
	while(!(UCSRA & (1<<5) ));
  fc:	5d 9b       	sbis	0x0b, 5	; 11
  fe:	fe cf       	rjmp	.-4      	; 0xfc <uart_Send>
	UDR = x;
 100:	8c b9       	out	0x0c, r24	; 12
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
