
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ba  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f3  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e9  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <get_key>:
#define PINB *(volatile char *) 0x36
#define PORTD *(volatile char *) 0x35
#define DDRD *(volatile char *) 0x34
char get_key()
{
	for(int i=0;i<=3;i++)
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	7a c0       	rjmp	.+244    	; 0x166 <get_key+0xfa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	83 ec       	ldi	r24, 0xC3	; 195
  74:	99 e0       	ldi	r25, 0x09	; 9
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <get_key+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <get_key+0x10>
  7c:	00 00       	nop
	{
		_delay_ms(10);
		PORTB=0;
  7e:	18 ba       	out	0x18, r1	; 24
		PORTB |=1<<i;
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	06 2e       	mov	r0, r22
  88:	02 c0       	rjmp	.+4      	; 0x8e <get_key+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <get_key+0x1e>
  92:	82 2b       	or	r24, r18
  94:	88 bb       	out	0x18, r24	; 24
	
		for(int j=0;j<=3;j++)
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	5f c0       	rjmp	.+190    	; 0x15a <get_key+0xee>
		{	
			if(PINB & (1<<j<<4)){
  9c:	86 b3       	in	r24, 0x16	; 22
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	04 2e       	mov	r0, r20
  a4:	02 c0       	rjmp	.+4      	; 0xaa <get_key+0x3e>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <get_key+0x3a>
  ae:	22 95       	swap	r18
  b0:	32 95       	swap	r19
  b2:	30 7f       	andi	r19, 0xF0	; 240
  b4:	32 27       	eor	r19, r18
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	32 27       	eor	r19, r18
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	82 23       	and	r24, r18
  be:	93 23       	and	r25, r19
  c0:	89 2b       	or	r24, r25
  c2:	09 f4       	brne	.+2      	; 0xc6 <get_key+0x5a>
  c4:	48 c0       	rjmp	.+144    	; 0x156 <get_key+0xea>
			while(PINB & (1<<j<<4));
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	82 23       	and	r24, r18
  cc:	93 23       	and	r25, r19
  ce:	89 2b       	or	r24, r25
  d0:	d1 f7       	brne	.-12     	; 0xc6 <get_key+0x5a>
			switch(i){
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	71 05       	cpc	r23, r1
  d6:	c9 f0       	breq	.+50     	; 0x10a <get_key+0x9e>
  d8:	24 f4       	brge	.+8      	; 0xe2 <get_key+0x76>
  da:	61 15       	cp	r22, r1
  dc:	71 05       	cpc	r23, r1
  de:	41 f0       	breq	.+16     	; 0xf0 <get_key+0x84>
  e0:	3a c0       	rjmp	.+116    	; 0x156 <get_key+0xea>
  e2:	62 30       	cpi	r22, 0x02	; 2
  e4:	71 05       	cpc	r23, r1
  e6:	f1 f0       	breq	.+60     	; 0x124 <get_key+0xb8>
  e8:	63 30       	cpi	r22, 0x03	; 3
  ea:	71 05       	cpc	r23, r1
  ec:	41 f1       	breq	.+80     	; 0x13e <get_key+0xd2>
  ee:	33 c0       	rjmp	.+102    	; 0x156 <get_key+0xea>
			case 0 :
			if(j==0 ) return '7';
  f0:	41 15       	cp	r20, r1
  f2:	51 05       	cpc	r21, r1
  f4:	f1 f1       	breq	.+124    	; 0x172 <get_key+0x106>
			else if(j==1 ) return '8';
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	51 05       	cpc	r21, r1
  fa:	e9 f1       	breq	.+122    	; 0x176 <get_key+0x10a>
			else if(j==2 ) return '9';
  fc:	42 30       	cpi	r20, 0x02	; 2
  fe:	51 05       	cpc	r21, r1
 100:	e1 f1       	breq	.+120    	; 0x17a <get_key+0x10e>
			else if(j==3 ) return '/';
 102:	43 30       	cpi	r20, 0x03	; 3
 104:	51 05       	cpc	r21, r1
 106:	39 f5       	brne	.+78     	; 0x156 <get_key+0xea>
 108:	3a c0       	rjmp	.+116    	; 0x17e <get_key+0x112>
			break;
			
			case 1 :
			if(j==0 ) return '4';
 10a:	41 15       	cp	r20, r1
 10c:	51 05       	cpc	r21, r1
 10e:	c9 f1       	breq	.+114    	; 0x182 <get_key+0x116>
			else if(j==1 ) return '5';
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	51 05       	cpc	r21, r1
 114:	c1 f1       	breq	.+112    	; 0x186 <get_key+0x11a>
			else if(j==2 ) return '6';
 116:	42 30       	cpi	r20, 0x02	; 2
 118:	51 05       	cpc	r21, r1
 11a:	b9 f1       	breq	.+110    	; 0x18a <get_key+0x11e>
			else if(j==3 ) return '*';
 11c:	43 30       	cpi	r20, 0x03	; 3
 11e:	51 05       	cpc	r21, r1
 120:	d1 f4       	brne	.+52     	; 0x156 <get_key+0xea>
 122:	35 c0       	rjmp	.+106    	; 0x18e <get_key+0x122>
			break;
			
			case 2 :
			if(j==0 ) return '1';
 124:	41 15       	cp	r20, r1
 126:	51 05       	cpc	r21, r1
 128:	a1 f1       	breq	.+104    	; 0x192 <get_key+0x126>
			else if(j==1 ) return '2';
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	51 05       	cpc	r21, r1
 12e:	99 f1       	breq	.+102    	; 0x196 <get_key+0x12a>
			else if(j==2 ) return '3';
 130:	42 30       	cpi	r20, 0x02	; 2
 132:	51 05       	cpc	r21, r1
 134:	91 f1       	breq	.+100    	; 0x19a <get_key+0x12e>
			else if(j==3 ) return '-';
 136:	43 30       	cpi	r20, 0x03	; 3
 138:	51 05       	cpc	r21, r1
 13a:	69 f4       	brne	.+26     	; 0x156 <get_key+0xea>
 13c:	30 c0       	rjmp	.+96     	; 0x19e <get_key+0x132>
			break;
			
			case 3 :
			if(j==0 ) return 'c';
 13e:	41 15       	cp	r20, r1
 140:	51 05       	cpc	r21, r1
 142:	79 f1       	breq	.+94     	; 0x1a2 <get_key+0x136>
			else if(j==1 ) return '0';
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	51 05       	cpc	r21, r1
 148:	71 f1       	breq	.+92     	; 0x1a6 <get_key+0x13a>
			else if(j==2 ) return '=';
 14a:	42 30       	cpi	r20, 0x02	; 2
 14c:	51 05       	cpc	r21, r1
 14e:	69 f1       	breq	.+90     	; 0x1aa <get_key+0x13e>
			else if(j==3 ) return '+';
 150:	43 30       	cpi	r20, 0x03	; 3
 152:	51 05       	cpc	r21, r1
 154:	61 f1       	breq	.+88     	; 0x1ae <get_key+0x142>
	{
		_delay_ms(10);
		PORTB=0;
		PORTB |=1<<i;
	
		for(int j=0;j<=3;j++)
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	44 30       	cpi	r20, 0x04	; 4
 15c:	51 05       	cpc	r21, r1
 15e:	0c f4       	brge	.+2      	; 0x162 <get_key+0xf6>
 160:	9d cf       	rjmp	.-198    	; 0x9c <get_key+0x30>
#define PINB *(volatile char *) 0x36
#define PORTD *(volatile char *) 0x35
#define DDRD *(volatile char *) 0x34
char get_key()
{
	for(int i=0;i<=3;i++)
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	64 30       	cpi	r22, 0x04	; 4
 168:	71 05       	cpc	r23, r1
 16a:	0c f4       	brge	.+2      	; 0x16e <get_key+0x102>
 16c:	82 cf       	rjmp	.-252    	; 0x72 <get_key+0x6>
			break;
			}
		}
		}
	}
	return 'N';
 16e:	8e e4       	ldi	r24, 0x4E	; 78
 170:	08 95       	ret
		{	
			if(PINB & (1<<j<<4)){
			while(PINB & (1<<j<<4));
			switch(i){
			case 0 :
			if(j==0 ) return '7';
 172:	87 e3       	ldi	r24, 0x37	; 55
 174:	08 95       	ret
			else if(j==1 ) return '8';
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	08 95       	ret
			else if(j==2 ) return '9';
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	08 95       	ret
			else if(j==3 ) return '/';
 17e:	8f e2       	ldi	r24, 0x2F	; 47
 180:	08 95       	ret
			break;
			
			case 1 :
			if(j==0 ) return '4';
 182:	84 e3       	ldi	r24, 0x34	; 52
 184:	08 95       	ret
			else if(j==1 ) return '5';
 186:	85 e3       	ldi	r24, 0x35	; 53
 188:	08 95       	ret
			else if(j==2 ) return '6';
 18a:	86 e3       	ldi	r24, 0x36	; 54
 18c:	08 95       	ret
			else if(j==3 ) return '*';
 18e:	8a e2       	ldi	r24, 0x2A	; 42
 190:	08 95       	ret
			break;
			
			case 2 :
			if(j==0 ) return '1';
 192:	81 e3       	ldi	r24, 0x31	; 49
 194:	08 95       	ret
			else if(j==1 ) return '2';
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	08 95       	ret
			else if(j==2 ) return '3';
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	08 95       	ret
			else if(j==3 ) return '-';
 19e:	8d e2       	ldi	r24, 0x2D	; 45
 1a0:	08 95       	ret
			break;
			
			case 3 :
			if(j==0 ) return 'c';
 1a2:	83 e6       	ldi	r24, 0x63	; 99
 1a4:	08 95       	ret
			else if(j==1 ) return '0';
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	08 95       	ret
			else if(j==2 ) return '=';
 1aa:	8d e3       	ldi	r24, 0x3D	; 61
 1ac:	08 95       	ret
			else if(j==3 ) return '+';
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
		}
		}
	}
	return 'N';
	
}
 1b0:	08 95       	ret

000001b2 <init>:



void init()
{
	UBRRL=51;
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	89 b9       	out	0x09, r24	; 9
	UCSRB|=1<<3 | 1<<4;
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	88 61       	ori	r24, 0x18	; 24
 1ba:	8a b9       	out	0x0a, r24	; 10
 1bc:	08 95       	ret

000001be <send>:
}
void send (char text)
{
	while(! (UCSRA & 1<<5));
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <send>
	udr = text;
 1c2:	8c b9       	out	0x0c, r24	; 12
 1c4:	08 95       	ret

000001c6 <rec>:
}

char rec ()
{
	while(! (UCSRA & 1<<7));
 1c6:	5f 9b       	sbis	0x0b, 7	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <rec>
	return udr;
 1ca:	8c b1       	in	r24, 0x0c	; 12
}
 1cc:	08 95       	ret

000001ce <main>:

int main(void)
{
	DDRB=0x0f;
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	87 bb       	out	0x17, r24	; 23
	DDRD=0XFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	84 bb       	out	0x14, r24	; 20
   init();
 1d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init>
   char x;
    while (1) 
    {
		x=get_key();
 1da:	0e 94 36 00 	call	0x6c	; 0x6c <get_key>
		switch(x)
 1de:	8e 34       	cpi	r24, 0x4E	; 78
 1e0:	e1 f3       	breq	.-8      	; 0x1da <main+0xc>
 1e2:	83 36       	cpi	r24, 0x63	; 99
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <main+0x22>
		{
			case 'N': break;
			case  'c' :x=rec();PORTD=x-48;break;
 1e6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <rec>
 1ea:	80 53       	subi	r24, 0x30	; 48
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	f5 cf       	rjmp	.-22     	; 0x1da <main+0xc>
			default: send(x);break;
 1f0:	0e 94 df 00 	call	0x1be	; 0x1be <send>
 1f4:	f2 cf       	rjmp	.-28     	; 0x1da <main+0xc>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
