
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  0080006e  0080006e  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a48  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000524  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000339  00000000  00000000  00001fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000231e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3d       	cpi	r26, 0xD3	; 211
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  8a:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_ENABLE>:
		if(col>=0 && col<16)
		LCD_WRITE_COMMAND(0xC0+col);
	}
	else
	{
		LCD_WRITE_COMMAND(0x80);
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bb       	out	0x1b, r24	; 27
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_ENABLE+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_ENABLE+0x10>
  a2:	00 00       	nop
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret

000000ac <LCD_WRITE_COMMAND>:
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_ENABLE>
  be:	08 95       	ret

000000c0 <LCD_WRITE_CHAR>:
	LCD_ENABLE();
	
}
void LCD_WRITE_CHAR(char text)
{
	LCD_PORT=text;
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL^=1<<5;
  c2:	9b b3       	in	r25, 0x1b	; 27
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	89 27       	eor	r24, r25
  c8:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL&=~(1<<RW);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL|=(1<<RS);
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE();
  d6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_ENABLE>
  da:	08 95       	ret

000000dc <LCD_WRITE_STRING>:
}
void LCD_WRITE_STRING(char * text)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
	while(*text !='\0')
  e2:	03 c0       	rjmp	.+6      	; 0xea <LCD_WRITE_STRING+0xe>
	{
		LCD_WRITE_CHAR(*text++);
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_WRITE_CHAR>
	LCD_CTRL|=(1<<RS);
	LCD_ENABLE();
}
void LCD_WRITE_STRING(char * text)
{
	while(*text !='\0')
  ea:	88 81       	ld	r24, Y
  ec:	81 11       	cpse	r24, r1
  ee:	fa cf       	rjmp	.-12     	; 0xe4 <LCD_WRITE_STRING+0x8>
	{
		LCD_WRITE_CHAR(*text++);
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_INIT+0x4>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_INIT+0xa>
 100:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(100);
	GPIO_DDRA=0xff;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a bb       	out	0x1a, r24	; 26
	GPIO_DDRB=0XFF;
 106:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(1<<RW | 1<<RS | 1<<EN );
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 78       	andi	r24, 0x8F	; 143
 10c:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE();
 10e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_ENABLE>
	LCD_WRITE_COMMAND(0x0f);//to turn on lcd and cursor
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x38);//2 lines and 5×7 matrix
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x80);//to start from first row
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 124:	08 95       	ret

00000126 <uart_init>:
#define SREG *(volatile char *)(0x5f)


void uart_init()
{
	UBRRL=51;
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	89 b9       	out	0x09, r24	; 9
	UCSRB|=1<<3 | 1<<4 | 1<<7 ;
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	88 69       	ori	r24, 0x98	; 152
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	08 95       	ret

00000132 <send_str>:
	else {str[i++]=x;PORTC=x;}
}


void send_str(char* text)
{
 132:	fc 01       	movw	r30, r24
	while(*text!=0)
 134:	04 c0       	rjmp	.+8      	; 0x13e <send_str+0xc>
	{
	if((UCSRA & 1<<5))
 136:	5d 9b       	sbis	0x0b, 5	; 11
 138:	02 c0       	rjmp	.+4      	; 0x13e <send_str+0xc>
	udr = *text++;
 13a:	31 96       	adiw	r30, 0x01	; 1
 13c:	9c b9       	out	0x0c, r25	; 12
}


void send_str(char* text)
{
	while(*text!=0)
 13e:	90 81       	ld	r25, Z
 140:	91 11       	cpse	r25, r1
 142:	f9 cf       	rjmp	.-14     	; 0x136 <send_str+0x4>
	{
	if((UCSRA & 1<<5))
	udr = *text++;
	}
}
 144:	08 95       	ret

00000146 <rec_str>:
char str[100];

void rec_str(char x)
{
	static char i=0;
	if(x==13) {LCD_WRITE_COMMAND(0x01);str[i]=0;i=0;LCD_WRITE_STRING(str);send_str(str);}
 146:	8d 30       	cpi	r24, 0x0D	; 13
 148:	a1 f4       	brne	.+40     	; 0x172 <rec_str+0x2c>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 150:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e1 59       	subi	r30, 0x91	; 145
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	10 82       	st	Z, r1
 15c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 160:	8f e6       	ldi	r24, 0x6F	; 111
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_WRITE_STRING>
 168:	8f e6       	ldi	r24, 0x6F	; 111
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 99 00 	call	0x132	; 0x132 <send_str>
 170:	08 95       	ret
	else {str[i++]=x;PORTC=x;}
 172:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9e 0f       	add	r25, r30
 17a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__data_end>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e1 59       	subi	r30, 0x91	; 145
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 83       	st	Z, r24
 186:	85 bb       	out	0x15, r24	; 21
 188:	08 95       	ret

0000018a <intr_init>:
	}
}
	
void intr_init()
{
	SREG|=1<<7;
 18a:	8f b7       	in	r24, 0x3f	; 63
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	8f bf       	out	0x3f, r24	; 63
 190:	08 95       	ret

00000192 <main>:
}
int main(void)
{
	
	intr_init();
 192:	0e 94 c5 00 	call	0x18a	; 0x18a <intr_init>
	DDRB=0x0f;
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 bb       	out	0x14, r24	; 20
   uart_init();
 19e:	0e 94 93 00 	call	0x126	; 0x126 <uart_init>
   LCD_INIT();
 1a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_INIT>
   send_str("mohamed ayman");
 1a6:	80 e6       	ldi	r24, 0x60	; 96
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 99 00 	call	0x132	; 0x132 <send_str>
char i=0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
		
		PORTA=i++;
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	98 0f       	add	r25, r24
 1b4:	8b bb       	out	0x1b, r24	; 27
		if(i==10) i=0;
 1b6:	9a 30       	cpi	r25, 0x0A	; 10
 1b8:	11 f0       	breq	.+4      	; 0x1be <main+0x2c>
   send_str("mohamed ayman");
char i=0;
    while (1) 
    {
		
		PORTA=i++;
 1ba:	89 2f       	mov	r24, r25
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <main+0x2e>
		if(i==10) i=0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	2f e9       	ldi	r18, 0x9F	; 159
 1c2:	36 e8       	ldi	r19, 0x86	; 134
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x34>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x3e>
 1d0:	00 00       	nop
 1d2:	ee cf       	rjmp	.-36     	; 0x1b0 <main+0x1e>

000001d4 <__vector_13>:



void __vector_13(void)__attribute__((signal,used));
void __vector_13(void)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	rec_str(udr);
 1f6:	8c b1       	in	r24, 0x0c	; 12
 1f8:	0e 94 a3 00 	call	0x146	; 0x146 <rec_str>
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
