
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  0000108b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016e  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <spi_send>:

#include <avr/io.h>
#include <avr/delay.h>
void spi_send(char x)
{
	SPDR=x;
  6c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <spi_send+0x2>
}
  72:	08 95       	ret

00000074 <seven_Seg_send>:

void seven_Seg_send(char reg, char data)
{
  74:	cf 93       	push	r28
  76:	c6 2f       	mov	r28, r22
	PORTB&=~(1<<4);
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	9f 7e       	andi	r25, 0xEF	; 239
  7c:	98 bb       	out	0x18, r25	; 24
	spi_send(reg);
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <spi_send>
	spi_send(data);
  82:	8c 2f       	mov	r24, r28
  84:	0e 94 36 00 	call	0x6c	; 0x6c <spi_send>
	PORTB|=1<<4;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	88 bb       	out	0x18, r24	; 24
}
  8e:	cf 91       	pop	r28
  90:	08 95       	ret

00000092 <main>:

int main(void)
{
	DDRB=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	//set spi as master and enable it
	SPCR=(1<<SPE)|(1<<MSTR);
  96:	80 e5       	ldi	r24, 0x50	; 80
  98:	8d b9       	out	0x0d, r24	; 13
	//decode 0-7 digits
	seven_Seg_send(0x09,0xFF);
  9a:	6f ef       	ldi	r22, 0xFF	; 255
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
	//Display digits 0 1 2 3 4 5 6 7
	seven_Seg_send(0x0B,0x07);
  a2:	67 e0       	ldi	r22, 0x07	; 7
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
	//normal operation
	seven_Seg_send(0x0C,0x01);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
	//Intensity 
	seven_Seg_send(0x0A,0x03);
  b2:	63 e0       	ldi	r22, 0x03	; 3
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>

    while (1) 
    {
		
		for(char i=1;i<=24;i++)
  ba:	01 e0       	ldi	r16, 0x01	; 1
  bc:	4e c0       	rjmp	.+156    	; 0x15a <main+0xc8>
		{
			for(int j=1;j<60;j++)
			{
				for(int k=0;k<60;k++)
				{
					seven_Seg_send(0x05,k/10);
  be:	ce 01       	movw	r24, r28
  c0:	6a e0       	ldi	r22, 0x0A	; 10
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 b0 00 	call	0x160	; 0x160 <__divmodhi4>
  c8:	18 2f       	mov	r17, r24
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
					seven_Seg_send(0x06,k%10);
  d0:	61 2f       	mov	r22, r17
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	87 ea       	ldi	r24, 0xA7	; 167
  da:	91 e6       	ldi	r25, 0x61	; 97
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x50>
  e2:	00 00       	nop
		
		for(char i=1;i<=24;i++)
		{
			for(int j=1;j<60;j++)
			{
				for(int k=0;k<60;k++)
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x5a>
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	cc 33       	cpi	r28, 0x3C	; 60
  ee:	d1 05       	cpc	r29, r1
  f0:	34 f3       	brlt	.-52     	; 0xbe <main+0x2c>
				{
					seven_Seg_send(0x05,k/10);
					seven_Seg_send(0x06,k%10);
					_delay_ms(100);
				}
				seven_Seg_send(0x03,j/10);
  f2:	c7 01       	movw	r24, r14
  f4:	6a e0       	ldi	r22, 0x0A	; 10
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 b0 00 	call	0x160	; 0x160 <__divmodhi4>
  fc:	c8 2f       	mov	r28, r24
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
				seven_Seg_send(0x04,j%10);
 104:	6c 2f       	mov	r22, r28
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
 10c:	87 ea       	ldi	r24, 0xA7	; 167
 10e:	91 e6       	ldi	r25, 0x61	; 97
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x7e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x84>
 116:	00 00       	nop
    while (1) 
    {
		
		for(char i=1;i<=24;i++)
		{
			for(int j=1;j<60;j++)
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	e9 1a       	sub	r14, r25
 11c:	f9 0a       	sbc	r15, r25
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x94>
 120:	ee 24       	eor	r14, r14
 122:	e3 94       	inc	r14
 124:	f1 2c       	mov	r15, r1
 126:	8c e3       	ldi	r24, 0x3C	; 60
 128:	e8 16       	cp	r14, r24
 12a:	f1 04       	cpc	r15, r1
 12c:	ec f2       	brlt	.-70     	; 0xe8 <main+0x56>
				}
				seven_Seg_send(0x03,j/10);
				seven_Seg_send(0x04,j%10);
				_delay_ms(100);
			}			
			seven_Seg_send(0x01,i/10);
 12e:	cd ec       	ldi	r28, 0xCD	; 205
 130:	0c 9f       	mul	r16, r28
 132:	c1 2d       	mov	r28, r1
 134:	11 24       	eor	r1, r1
 136:	c6 95       	lsr	r28
 138:	c6 95       	lsr	r28
 13a:	c6 95       	lsr	r28
 13c:	6c 2f       	mov	r22, r28
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
			seven_Seg_send(0x02,i%10);
 144:	cc 0f       	add	r28, r28
 146:	8c 2f       	mov	r24, r28
 148:	88 0f       	add	r24, r24
 14a:	88 0f       	add	r24, r24
 14c:	c8 0f       	add	r28, r24
 14e:	60 2f       	mov	r22, r16
 150:	6c 1b       	sub	r22, r28
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 3a 00 	call	0x74	; 0x74 <seven_Seg_send>
	seven_Seg_send(0x0A,0x03);

    while (1) 
    {
		
		for(char i=1;i<=24;i++)
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	09 31       	cpi	r16, 0x19	; 25
 15c:	08 f3       	brcs	.-62     	; 0x120 <main+0x8e>
 15e:	ad cf       	rjmp	.-166    	; 0xba <main+0x28>

00000160 <__divmodhi4>:
 160:	97 fb       	bst	r25, 7
 162:	07 2e       	mov	r0, r23
 164:	16 f4       	brtc	.+4      	; 0x16a <__divmodhi4+0xa>
 166:	00 94       	com	r0
 168:	07 d0       	rcall	.+14     	; 0x178 <__divmodhi4_neg1>
 16a:	77 fd       	sbrc	r23, 7
 16c:	09 d0       	rcall	.+18     	; 0x180 <__divmodhi4_neg2>
 16e:	0e 94 c4 00 	call	0x188	; 0x188 <__udivmodhi4>
 172:	07 fc       	sbrc	r0, 7
 174:	05 d0       	rcall	.+10     	; 0x180 <__divmodhi4_neg2>
 176:	3e f4       	brtc	.+14     	; 0x186 <__divmodhi4_exit>

00000178 <__divmodhi4_neg1>:
 178:	90 95       	com	r25
 17a:	81 95       	neg	r24
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	08 95       	ret

00000180 <__divmodhi4_neg2>:
 180:	70 95       	com	r23
 182:	61 95       	neg	r22
 184:	7f 4f       	sbci	r23, 0xFF	; 255

00000186 <__divmodhi4_exit>:
 186:	08 95       	ret

00000188 <__udivmodhi4>:
 188:	aa 1b       	sub	r26, r26
 18a:	bb 1b       	sub	r27, r27
 18c:	51 e1       	ldi	r21, 0x11	; 17
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__udivmodhi4_ep>

00000190 <__udivmodhi4_loop>:
 190:	aa 1f       	adc	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	a6 17       	cp	r26, r22
 196:	b7 07       	cpc	r27, r23
 198:	10 f0       	brcs	.+4      	; 0x19e <__udivmodhi4_ep>
 19a:	a6 1b       	sub	r26, r22
 19c:	b7 0b       	sbc	r27, r23

0000019e <__udivmodhi4_ep>:
 19e:	88 1f       	adc	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	5a 95       	dec	r21
 1a4:	a9 f7       	brne	.-22     	; 0x190 <__udivmodhi4_loop>
 1a6:	80 95       	com	r24
 1a8:	90 95       	com	r25
 1aa:	bc 01       	movw	r22, r24
 1ac:	cd 01       	movw	r24, r26
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
