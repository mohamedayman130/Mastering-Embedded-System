
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000969  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067d  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042f  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022c  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <spi_send>:

#include <avr/io.h>
#include <avr/delay.h>
void spi_send(char x)
{
	SPDR=x;
  7c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  7e:	77 9b       	sbis	0x0e, 7	; 14
  80:	fe cf       	rjmp	.-4      	; 0x7e <spi_send+0x2>
}
  82:	08 95       	ret

00000084 <seven_Seg_send>:

void seven_Seg_send(char reg, char data)
{
  84:	cf 93       	push	r28
  86:	c6 2f       	mov	r28, r22
	PORTB&=~(1<<4);
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9f 7e       	andi	r25, 0xEF	; 239
  8c:	98 bb       	out	0x18, r25	; 24
	spi_send(reg);
  8e:	0e 94 3e 00 	call	0x7c	; 0x7c <spi_send>
	spi_send(data);
  92:	8c 2f       	mov	r24, r28
  94:	0e 94 3e 00 	call	0x7c	; 0x7c <spi_send>
	PORTB|=1<<4;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	88 bb       	out	0x18, r24	; 24
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <uart_init>:

void uart_init()
{
	UCSRB|= 1<<4 | 1<<3 ;
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	88 61       	ori	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
	UBRRL=51;
  a8:	83 e3       	ldi	r24, 0x33	; 51
  aa:	89 b9       	out	0x09, r24	; 9
  ac:	08 95       	ret

000000ae <uart_rec>:
char clk[2];
//char m_clk[2];
//char h_clk[2];
void uart_rec()
{
	char j=0;
  ae:	20 e0       	ldi	r18, 0x00	; 0
	while(j<6){
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <uart_rec+0x26>
	char i=0;
	while(i<2){
	while(! (UCSRA & 1<<7) );
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <uart_rec+0x4>
	char text=UDR;
  b6:	8c b1       	in	r24, 0x0c	; 12
	if(text != 13)
  b8:	8d 30       	cpi	r24, 0x0D	; 13
  ba:	51 f0       	breq	.+20     	; 0xd0 <uart_rec+0x22>
	{
		clk[j++]=text-48;
  bc:	e2 2f       	mov	r30, r18
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	80 53       	subi	r24, 0x30	; 48
  c6:	80 83       	st	Z, r24
		i++;
  c8:	9f 5f       	subi	r25, 0xFF	; 255
	while(i<2){
	while(! (UCSRA & 1<<7) );
	char text=UDR;
	if(text != 13)
	{
		clk[j++]=text-48;
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <uart_rec+0x22>
  ce:	90 e0       	ldi	r25, 0x00	; 0
void uart_rec()
{
	char j=0;
	while(j<6){
	char i=0;
	while(i<2){
  d0:	92 30       	cpi	r25, 0x02	; 2
  d2:	78 f3       	brcs	.-34     	; 0xb2 <uart_rec+0x4>
//char m_clk[2];
//char h_clk[2];
void uart_rec()
{
	char j=0;
	while(j<6){
  d4:	26 30       	cpi	r18, 0x06	; 6
  d6:	d8 f3       	brcs	.-10     	; 0xce <uart_rec+0x20>
		clk[j++]=text-48;
		i++;
	}
	}
	}
}
  d8:	08 95       	ret

000000da <main>:
int main(void)
{
	DDRB=0xff;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
  de:	81 bb       	out	0x11, r24	; 17
	uart_init();
  e0:	0e 94 51 00 	call	0xa2	; 0xa2 <uart_init>
	//set spi as master and enable it
	SPCR=(1<<SPE)|(1<<MSTR);
  e4:	80 e5       	ldi	r24, 0x50	; 80
  e6:	8d b9       	out	0x0d, r24	; 13
	//decode 0-7 digits
	seven_Seg_send(0x09,0xFF);
  e8:	6f ef       	ldi	r22, 0xFF	; 255
  ea:	89 e0       	ldi	r24, 0x09	; 9
  ec:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
	//Display digits 0 1 2 3 4 5 
	seven_Seg_send(0x0B,0x05);
  f0:	65 e0       	ldi	r22, 0x05	; 5
  f2:	8b e0       	ldi	r24, 0x0B	; 11
  f4:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
	//normal operation
	seven_Seg_send(0x0C,0x01);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
	//Intensity 
	seven_Seg_send(0x0A,0x03);
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
    char h=0,m=0,s=0; 
	
    while (1) 
    {
		char flag=0,alarm=0;
		uart_rec();
 108:	0e 94 57 00 	call	0xae	; 0xae <uart_rec>
		s= (clk[4])*10 +clk[5] ;
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	84 81       	ldd	r24, Z+4	; 0x04
 112:	15 81       	ldd	r17, Z+5	; 0x05
 114:	88 0f       	add	r24, r24
 116:	98 2f       	mov	r25, r24
 118:	99 0f       	add	r25, r25
 11a:	99 0f       	add	r25, r25
 11c:	89 0f       	add	r24, r25
 11e:	18 0f       	add	r17, r24
		m= (clk[2])*10 +clk[3] ;
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	d3 80       	ldd	r13, Z+3	; 0x03
 124:	88 0f       	add	r24, r24
 126:	98 2f       	mov	r25, r24
 128:	99 0f       	add	r25, r25
 12a:	99 0f       	add	r25, r25
 12c:	89 0f       	add	r24, r25
 12e:	d8 0e       	add	r13, r24
		h= (clk[0])*10 +clk[1] ;
 130:	80 81       	ld	r24, Z
 132:	e1 80       	ldd	r14, Z+1	; 0x01
 134:	88 0f       	add	r24, r24
 136:	98 2f       	mov	r25, r24
 138:	99 0f       	add	r25, r25
 13a:	99 0f       	add	r25, r25
 13c:	89 0f       	add	r24, r25
 13e:	e8 0e       	add	r14, r24
		if( s>59 )s=59;
 140:	1c 33       	cpi	r17, 0x3C	; 60
 142:	08 f0       	brcs	.+2      	; 0x146 <main+0x6c>
 144:	1b e3       	ldi	r17, 0x3B	; 59
		if( m>59 )m=59;
 146:	2b e3       	ldi	r18, 0x3B	; 59
 148:	2d 15       	cp	r18, r13
 14a:	20 f4       	brcc	.+8      	; 0x154 <main+0x7a>
 14c:	0f 2e       	mov	r0, r31
 14e:	fb e3       	ldi	r31, 0x3B	; 59
 150:	df 2e       	mov	r13, r31
 152:	f0 2d       	mov	r31, r0
		if(h>23) h=23;
 154:	87 e1       	ldi	r24, 0x17	; 23
 156:	8e 15       	cp	r24, r14
 158:	20 f4       	brcc	.+8      	; 0x162 <main+0x88>
 15a:	0f 2e       	mov	r0, r31
 15c:	f7 e1       	ldi	r31, 0x17	; 23
 15e:	ef 2e       	mov	r14, r31
 160:	f0 2d       	mov	r31, r0
		for(char i=0;i<24;)
 162:	f1 2c       	mov	r15, r1
	seven_Seg_send(0x0A,0x03);
    char h=0,m=0,s=0; 
	
    while (1) 
    {
		char flag=0,alarm=0;
 164:	c1 2c       	mov	r12, r1
 166:	b1 2c       	mov	r11, r1
		m= (clk[2])*10 +clk[3] ;
		h= (clk[0])*10 +clk[1] ;
		if( s>59 )s=59;
		if( m>59 )m=59;
		if(h>23) h=23;
		for(char i=0;i<24;)
 168:	72 c0       	rjmp	.+228    	; 0x24e <main+0x174>
			for(char j=0;j<60;)
			{
				for(char k=0;k<60;k++)
				{
					
					seven_Seg_send(0x05,k/10);
 16a:	cd ec       	ldi	r28, 0xCD	; 205
 16c:	dc 9f       	mul	r29, r28
 16e:	c1 2d       	mov	r28, r1
 170:	11 24       	eor	r1, r1
 172:	c6 95       	lsr	r28
 174:	c6 95       	lsr	r28
 176:	c6 95       	lsr	r28
 178:	6c 2f       	mov	r22, r28
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x06,k%10);
 180:	cc 0f       	add	r28, r28
 182:	8c 2f       	mov	r24, r28
 184:	88 0f       	add	r24, r24
 186:	88 0f       	add	r24, r24
 188:	c8 0f       	add	r28, r24
 18a:	6d 2f       	mov	r22, r29
 18c:	6c 1b       	sub	r22, r28
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	9f e3       	ldi	r25, 0x3F	; 63
 196:	2d e0       	ldi	r18, 0x0D	; 13
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	91 50       	subi	r25, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0xc0>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xca>
 1a4:	00 00       	nop
					_delay_ms(1000);///////////////////only change this delay
					if(k==s && j==m && i==h){flag=1;alarm=1;PORTB|=1<<1; break;}
 1a6:	1d 13       	cpse	r17, r29
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <main+0xe8>
 1aa:	d0 12       	cpse	r13, r16
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <main+0xe8>
 1ae:	ef 10       	cpse	r14, r15
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <main+0xe8>
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	cc 24       	eor	r12, r12
 1ba:	c3 94       	inc	r12
 1bc:	bb 24       	eor	r11, r11
 1be:	b3 94       	inc	r11
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <main+0xf2>
		if(h>23) h=23;
		for(char i=0;i<24;)
		{
			for(char j=0;j<60;)
			{
				for(char k=0;k<60;k++)
 1c2:	df 5f       	subi	r29, 0xFF	; 255
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <main+0xee>
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	dc 33       	cpi	r29, 0x3C	; 60
 1ca:	78 f2       	brcs	.-98     	; 0x16a <main+0x90>
					seven_Seg_send(0x05,k/10);
					seven_Seg_send(0x06,k%10);
					_delay_ms(1000);///////////////////only change this delay
					if(k==s && j==m && i==h){flag=1;alarm=1;PORTB|=1<<1; break;}
				}
				if(flag == 1) break;
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	b9 16       	cp	r11, r25
 1d0:	29 f1       	breq	.+74     	; 0x21c <main+0x142>
				if(j==59) 
 1d2:	0b 33       	cpi	r16, 0x3B	; 59
 1d4:	49 f4       	brne	.+18     	; 0x1e8 <main+0x10e>
				{
				seven_Seg_send(0x03,0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
				seven_Seg_send(0x04,0);break;
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
 1e6:	1a c0       	rjmp	.+52     	; 0x21c <main+0x142>
				}
				j++;
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
				seven_Seg_send(0x03,j/10);
 1ea:	cd ec       	ldi	r28, 0xCD	; 205
 1ec:	0c 9f       	mul	r16, r28
 1ee:	c1 2d       	mov	r28, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	c6 95       	lsr	r28
 1f4:	c6 95       	lsr	r28
 1f6:	c6 95       	lsr	r28
 1f8:	6c 2f       	mov	r22, r28
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
				seven_Seg_send(0x04,j%10);
 200:	cc 0f       	add	r28, r28
 202:	8c 2f       	mov	r24, r28
 204:	88 0f       	add	r24, r24
 206:	88 0f       	add	r24, r24
 208:	c8 0f       	add	r28, r24
 20a:	60 2f       	mov	r22, r16
 20c:	6c 1b       	sub	r22, r28
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
 214:	01 c0       	rjmp	.+2      	; 0x218 <main+0x13e>
 216:	00 e0       	ldi	r16, 0x00	; 0
		if( s>59 )s=59;
		if( m>59 )m=59;
		if(h>23) h=23;
		for(char i=0;i<24;)
		{
			for(char j=0;j<60;)
 218:	0c 33       	cpi	r16, 0x3C	; 60
 21a:	a8 f2       	brcs	.-86     	; 0x1c6 <main+0xec>
				}
				j++;
				seven_Seg_send(0x03,j/10);
				seven_Seg_send(0x04,j%10);
			}
			if(flag == 1) break;
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	b2 16       	cp	r11, r18
 220:	c9 f0       	breq	.+50     	; 0x254 <main+0x17a>
			i++;
 222:	f3 94       	inc	r15
			seven_Seg_send(0x01,i/10);
 224:	cd ec       	ldi	r28, 0xCD	; 205
 226:	fc 9e       	mul	r15, r28
 228:	c1 2d       	mov	r28, r1
 22a:	11 24       	eor	r1, r1
 22c:	c6 95       	lsr	r28
 22e:	c6 95       	lsr	r28
 230:	c6 95       	lsr	r28
 232:	6c 2f       	mov	r22, r28
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
			seven_Seg_send(0x02,i%10);
 23a:	cc 0f       	add	r28, r28
 23c:	8c 2f       	mov	r24, r28
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	c8 0f       	add	r28, r24
 244:	6f 2d       	mov	r22, r15
 246:	6c 1b       	sub	r22, r28
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
		m= (clk[2])*10 +clk[3] ;
		h= (clk[0])*10 +clk[1] ;
		if( s>59 )s=59;
		if( m>59 )m=59;
		if(h>23) h=23;
		for(char i=0;i<24;)
 24e:	87 e1       	ldi	r24, 0x17	; 23
 250:	8f 15       	cp	r24, r15
 252:	08 f7       	brcc	.-62     	; 0x216 <main+0x13c>
			i++;
			seven_Seg_send(0x01,i/10);
			seven_Seg_send(0x02,i%10);
			
		}
		if(alarm == 1)
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	c9 12       	cpse	r12, r25
 258:	57 cf       	rjmp	.-338    	; 0x108 <main+0x2e>
		{
			while(1)
			{
				if( (PINB & (1<<0)) !=0)
 25a:	b0 9b       	sbis	0x16, 0	; 22
 25c:	fe cf       	rjmp	.-4      	; 0x25a <main+0x180>
				{
					PORTB&=~(1<<1);
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	8d 7f       	andi	r24, 0xFD	; 253
 262:	88 bb       	out	0x18, r24	; 24
					seven_Seg_send(0x01,0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x02,0);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x03,0);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x04,0);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x05,0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					seven_Seg_send(0x06,0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	0e 94 42 00 	call	0x84	; 0x84 <seven_Seg_send>
					break;
 294:	39 cf       	rjmp	.-398    	; 0x108 <main+0x2e>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
