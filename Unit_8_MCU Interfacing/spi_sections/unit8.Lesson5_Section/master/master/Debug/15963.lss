
15963.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000986  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075a  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bb  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000222  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  7a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_ENABLE>:
		if(col>=0 && col<16)
		LCD_WRITE_COMMAND(0xC0+col);
	}
	else
	{
		LCD_WRITE_COMMAND(0x80);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	9c b3       	in	r25, 0x1c	; 28
  86:	84 60       	ori	r24, 0x04	; 4
  88:	9c bb       	out	0x1c, r25	; 28
  8a:	8b bb       	out	0x1b, r24	; 27
  8c:	83 ed       	ldi	r24, 0xD3	; 211
  8e:	90 e3       	ldi	r25, 0x30	; 48
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <LCD_ENABLE+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCD_ENABLE+0x14>
  96:	00 00       	nop
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	9c b3       	in	r25, 0x1c	; 28
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	9c bb       	out	0x1c, r25	; 28
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <LCD_WRITE_COMMAND>:
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	96 bb       	out	0x16, r25	; 22
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	9c b3       	in	r25, 0x1c	; 28
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	9c bb       	out	0x1c, r25	; 28
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	9c b3       	in	r25, 0x1c	; 28
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	9c bb       	out	0x1c, r25	; 28
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
  c2:	08 95       	ret

000000c4 <LCD_WRITE_CHAR>:
	LCD_ENABLE();
	
}
void LCD_WRITE_CHAR(char text)
{
	LCD_PORT=text;
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	96 bb       	out	0x16, r25	; 22
  c8:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL^=1<<5;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	9c b3       	in	r25, 0x1c	; 28
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	82 27       	eor	r24, r18
  d2:	9c bb       	out	0x1c, r25	; 28
  d4:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL&=~(1<<RW);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	9c b3       	in	r25, 0x1c	; 28
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	9c bb       	out	0x1c, r25	; 28
  de:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL|=(1<<RS);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	9c b3       	in	r25, 0x1c	; 28
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	9c bb       	out	0x1c, r25	; 28
  e8:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE();
  ea:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
  ee:	08 95       	ret

000000f0 <LCD_WRITE_STRING>:
}
void LCD_WRITE_STRING(char * text)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
	while(*text !='\0')
  f6:	03 c0       	rjmp	.+6      	; 0xfe <LCD_WRITE_STRING+0xe>
	{
		LCD_WRITE_CHAR(*text++);
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_WRITE_CHAR>
	LCD_CTRL|=(1<<RS);
	LCD_ENABLE();
}
void LCD_WRITE_STRING(char * text)
{
	while(*text !='\0')
  fe:	88 81       	ld	r24, Y
 100:	81 11       	cpse	r24, r1
 102:	fa cf       	rjmp	.-12     	; 0xf8 <LCD_WRITE_STRING+0x8>
	{
		LCD_WRITE_CHAR(*text++);
	}
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_INIT+0x4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_INIT+0xa>
 114:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(100);
	GPIO_DDRC=0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	95 bb       	out	0x15, r25	; 21
 11c:	84 bb       	out	0x14, r24	; 20
	GPIO_DDRA=0xff;
 11e:	9b bb       	out	0x1b, r25	; 27
 120:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW | 1<<RS | 1<<EN );
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	9c b3       	in	r25, 0x1c	; 28
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	9c bb       	out	0x1c, r25	; 28
 12a:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE();
 12c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
	LCD_WRITE_COMMAND(0x0f);//to turn on lcd and cursor
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x38);//2 lines and 5×7 matrix
 136:	88 e3       	ldi	r24, 0x38	; 56
 138:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x80);//to start from first row
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_WRITE_COMMAND>
 142:	08 95       	ret

00000144 <spi_init>:
#include <stdint.h>
#include <avr/delay.h>
#include "lcd.h"
void spi_init()
{
	DDRB |= 1<<4 | 1<<5 |1<<7;
 144:	87 b3       	in	r24, 0x17	; 23
 146:	80 6b       	ori	r24, 0xB0	; 176
 148:	87 bb       	out	0x17, r24	; 23
	SPCR|=1<<6 | 1<<4 ;
 14a:	8d b1       	in	r24, 0x0d	; 13
 14c:	80 65       	ori	r24, 0x50	; 80
 14e:	8d b9       	out	0x0d, r24	; 13
 150:	08 95       	ret

00000152 <send_rec_data>:
}

uint8_t send_rec_data(uint8_t data)
{
	SPDR = data;
 152:	8f b9       	out	0x0f, r24	; 15
	while (! (SPSR & 1<<7));
 154:	77 9b       	sbis	0x0e, 7	; 14
 156:	fe cf       	rjmp	.-4      	; 0x154 <send_rec_data+0x2>
	return SPDR;
 158:	8f b1       	in	r24, 0x0f	; 15
}
 15a:	08 95       	ret

0000015c <main>:

int main(void)
{	
	spi_init();
 15c:	0e 94 a2 00 	call	0x144	; 0x144 <spi_init>
	LCD_INIT();
 160:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_INIT>
	uint8_t x='z';
	LCD_WRITE_STRING("master");
 164:	80 e6       	ldi	r24, 0x60	; 96
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_STRING>

int main(void)
{	
	spi_init();
	LCD_INIT();
	uint8_t x='z';
 16c:	ca e7       	ldi	r28, 0x7A	; 122
	LCD_WRITE_STRING("master");
	
	while (1) 
    {
	LCD_WRITE_COMMAND(0xc0);
 16e:	80 ec       	ldi	r24, 0xC0	; 192
 170:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(send_rec_data(x--));
 174:	df ef       	ldi	r29, 0xFF	; 255
 176:	dc 0f       	add	r29, r28
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 a9 00 	call	0x152	; 0x152 <send_rec_data>
 17e:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_WRITE_CHAR>
	if(x=='a'-1) x='z';
 182:	d0 36       	cpi	r29, 0x60	; 96
 184:	11 f0       	breq	.+4      	; 0x18a <main+0x2e>
	LCD_WRITE_STRING("master");
	
	while (1) 
    {
	LCD_WRITE_COMMAND(0xc0);
	LCD_WRITE_CHAR(send_rec_data(x--));
 186:	cd 2f       	mov	r28, r29
 188:	01 c0       	rjmp	.+2      	; 0x18c <main+0x30>
	if(x=='a'-1) x='z';
 18a:	ca e7       	ldi	r28, 0x7A	; 122
 18c:	2f eb       	ldi	r18, 0xBF	; 191
 18e:	8c e5       	ldi	r24, 0x5C	; 92
 190:	95 e1       	ldi	r25, 0x15	; 21
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x36>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x40>
 19c:	00 00       	nop
 19e:	e7 cf       	rjmp	.-50     	; 0x16e <main+0x12>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
