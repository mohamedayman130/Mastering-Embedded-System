
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000627  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_init>:
 */ 
#include "i2c.h"
#include <avr/delay.h>
void i2c_init()
{
	TWBR = (((8000000 /0x48)-16)/2);
  6c:	8b ef       	ldi	r24, 0xFB	; 251
  6e:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
  70:	11 b8       	out	0x01, r1	; 1
  72:	08 95       	ret

00000074 <i2c_start>:
}
void i2c_start()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  74:	84 ea       	ldi	r24, 0xA4	; 164
  76:	86 bf       	out	0x36, r24	; 54
	while( (TWCR & 1<<7)==0  );
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <i2c_start+0x4>
	//while (TWSR != 0x08);
}
  7e:	08 95       	ret

00000080 <i2c_stop>:
void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  80:	84 e9       	ldi	r24, 0x94	; 148
  82:	86 bf       	out	0x36, r24	; 54
  84:	08 95       	ret

00000086 <send>:
}
void send(uint8_t data)
{
	TWDR =data;
  86:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	08 95       	ret

0000008e <main>:
#include <avr/io.h>
#include "i2c_lib/i2c.h"
#include "avr/delay.h"
int main(void)
{
	i2c_init(0X48);
  8e:	88 e4       	ldi	r24, 0x48	; 72
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_init>
    /* Replace with your application code */
	char ch=0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
	
    while (1) 
    {
		
		
		i2c_start();    //transmit start condition
  98:	0e 94 3a 00 	call	0x74	; 0x74 <i2c_start>
		
		send(0b11010000+0);   //transmit slave address + W(0)
  9c:	80 ed       	ldi	r24, 0xD0	; 208
  9e:	0e 94 43 00 	call	0x86	; 0x86 <send>
		
		while(TWSR != 0x18);      //slave address + W(0) has been transmitted and ACK has been received
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 31       	cpi	r24, 0x18	; 24
  a6:	e9 f7       	brne	.-6      	; 0xa2 <main+0x14>
		
		send(ch++);   //transmit data
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	dc 0f       	add	r29, r28
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 43 00 	call	0x86	; 0x86 <send>
		while(TWSR != 0x28);   //data has been transmitted and ACK has been received
  b2:	81 b1       	in	r24, 0x01	; 1
  b4:	88 32       	cpi	r24, 0x28	; 40
  b6:	e9 f7       	brne	.-6      	; 0xb2 <main+0x24>
		
		i2c_stop();
  b8:	0e 94 40 00 	call	0x80	; 0x80 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3e>
  cc:	00 00       	nop
		
		send(0b11010000+0);   //transmit slave address + W(0)
		
		while(TWSR != 0x18);      //slave address + W(0) has been transmitted and ACK has been received
		
		send(ch++);   //transmit data
  ce:	cd 2f       	mov	r28, r29
  d0:	e3 cf       	rjmp	.-58     	; 0x98 <main+0xa>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
