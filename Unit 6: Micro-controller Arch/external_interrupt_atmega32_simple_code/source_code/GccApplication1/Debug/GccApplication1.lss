
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063e  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000550  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ea  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b6  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_2>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define IO_DDRA *(volatile int *)(IO_BASE + 0x1A)
#define IO_PINA *(volatile int *)(IO_BASE + 0x19)
int main(void)
{
	//intialize pins as output
    IO_DDRA|=1<<0;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	9b b3       	in	r25, 0x1b	; 27
  70:	81 60       	ori	r24, 0x01	; 1
  72:	9b bb       	out	0x1b, r25	; 27
  74:	8a bb       	out	0x1a, r24	; 26
	IO_DDRA|=1<<1;
  76:	8a b3       	in	r24, 0x1a	; 26
  78:	9b b3       	in	r25, 0x1b	; 27
  7a:	82 60       	ori	r24, 0x02	; 2
  7c:	9b bb       	out	0x1b, r25	; 27
  7e:	8a bb       	out	0x1a, r24	; 26
	IO_DDRA|=1<<2;
  80:	8a b3       	in	r24, 0x1a	; 26
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	84 60       	ori	r24, 0x04	; 4
  86:	9b bb       	out	0x1b, r25	; 27
  88:	8a bb       	out	0x1a, r24	; 26
	IO_DDRA|=1<<3;
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	9b b3       	in	r25, 0x1b	; 27
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	9b bb       	out	0x1b, r25	; 27
  92:	8a bb       	out	0x1a, r24	; 26
	//select rising or falling edge of interrupt
	//for INT0 AND INT1
	MCUCR |=0b1001<<0;
  94:	85 b7       	in	r24, 0x35	; 53
  96:	89 60       	ori	r24, 0x09	; 9
  98:	85 bf       	out	0x35, r24	; 53
	//FOR INT2
	MCUCSR |=1<<6;
  9a:	84 b7       	in	r24, 0x34	; 52
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	84 bf       	out	0x34, r24	; 52
	//enable external pin interrupt
	GICR|=7<<5;
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	80 6e       	ori	r24, 0xE0	; 224
  a4:	8b bf       	out	0x3b, r24	; 59
	//enable global interrupt
	SREG |=1<<7;
  a6:	8f b7       	in	r24, 0x3f	; 63
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8f bf       	out	0x3f, r24	; 63
	
    while (1)
    {
		
	    //toggle PORTA3 led
		IO_PORTA |=1<<3;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	9c b3       	in	r25, 0x1c	; 28
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	9c bb       	out	0x1c, r25	; 28
  b4:	8b bb       	out	0x1b, r24	; 27
		for(int i=0;i<=30000;i++);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x52>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	81 33       	cpi	r24, 0x31	; 49
  c0:	25 e7       	ldi	r18, 0x75	; 117
  c2:	92 07       	cpc	r25, r18
  c4:	dc f3       	brlt	.-10     	; 0xbc <main+0x50>
		IO_PORTA &=~1<<3;
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	9c b3       	in	r25, 0x1c	; 28
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	9c bb       	out	0x1c, r25	; 28
  ce:	8b bb       	out	0x1b, r24	; 27
		for(int i=0;i<=30000;i++);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x6c>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	81 33       	cpi	r24, 0x31	; 49
  da:	25 e7       	ldi	r18, 0x75	; 117
  dc:	92 07       	cpc	r25, r18
  de:	dc f3       	brlt	.-10     	; 0xd6 <main+0x6a>
  e0:	e5 cf       	rjmp	.-54     	; 0xac <main+0x40>

000000e2 <__vector_1>:
    }
}

void __vector_1(void) __attribute__((signal, used));
void __vector_1(void)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	
	IO_PORTA |=1<<0;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	9c b3       	in	r25, 0x1c	; 28
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	9c bb       	out	0x1c, r25	; 28
  fa:	8b bb       	out	0x1b, r24	; 27
	for(int i=0;i<=30000;i++);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <__vector_1+0x22>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	81 33       	cpi	r24, 0x31	; 49
 106:	25 e7       	ldi	r18, 0x75	; 117
 108:	92 07       	cpc	r25, r18
 10a:	dc f3       	brlt	.-10     	; 0x102 <__vector_1+0x20>
	IO_PORTA &=~1<<0;
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	9c b3       	in	r25, 0x1c	; 28
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	9c bb       	out	0x1c, r25	; 28
 114:	8b bb       	out	0x1b, r24	; 27
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_2>:
void __vector_2(void) __attribute__((signal, used));
void __vector_2(void)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	
	IO_PORTA |=1<<1;
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	9c b3       	in	r25, 0x1c	; 28
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	9c bb       	out	0x1c, r25	; 28
 13e:	8b bb       	out	0x1b, r24	; 27
	for(int i=0;i<=30000;i++);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 c0       	rjmp	.+2      	; 0x148 <__vector_2+0x22>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	81 33       	cpi	r24, 0x31	; 49
 14a:	25 e7       	ldi	r18, 0x75	; 117
 14c:	92 07       	cpc	r25, r18
 14e:	dc f3       	brlt	.-10     	; 0x146 <__vector_2+0x20>
	IO_PORTA &=~1<<1;
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	9c b3       	in	r25, 0x1c	; 28
 154:	8c 7f       	andi	r24, 0xFC	; 252
 156:	9c bb       	out	0x1c, r25	; 28
 158:	8b bb       	out	0x1b, r24	; 27
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_3>:
void __vector_3(void) __attribute__((signal, used));
void __vector_3(void)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
	
	IO_PORTA |=1<<2;
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	9c b3       	in	r25, 0x1c	; 28
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	9c bb       	out	0x1c, r25	; 28
 182:	8b bb       	out	0x1b, r24	; 27
	for(int i=0;i<=30000;i++);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 c0       	rjmp	.+2      	; 0x18c <__vector_3+0x22>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	81 33       	cpi	r24, 0x31	; 49
 18e:	25 e7       	ldi	r18, 0x75	; 117
 190:	92 07       	cpc	r25, r18
 192:	dc f3       	brlt	.-10     	; 0x18a <__vector_3+0x20>
	IO_PORTA &=~1<<2;
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	9c b3       	in	r25, 0x1c	; 28
 198:	88 7f       	andi	r24, 0xF8	; 248
 19a:	9c bb       	out	0x1c, r25	; 28
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
