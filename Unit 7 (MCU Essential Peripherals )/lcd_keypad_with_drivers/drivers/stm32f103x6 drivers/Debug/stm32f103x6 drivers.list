
stm32f103x6 drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c08  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  08000c20  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000c20  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e6e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007cb  00000000  00000000  00022ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c0  00000000  00000000  00023672  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000130  00000000  00000000  00023d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00023e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002488  00000000  00000000  00023f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b72  00000000  00000000  000263d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008066  00000000  00000000  00027f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002ffb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000388  00000000  00000000  0003002c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bbc 	.word	0x08000bbc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000bbc 	.word	0x08000bbc

08000170 <clk_init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void clk_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clk_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clk_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clk_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clk_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <segment_init>:


void segment_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	gpio_config segment_cnf;

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 800019e:	2304      	movs	r3, #4
 80001a0:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_8;
 80001a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001a6:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <segment_init+0xb8>)
 80001b2:	f000 fc15 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001b6:	2304      	movs	r3, #4
 80001b8:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_9;
 80001ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001be:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <segment_init+0xb8>)
 80001ca:	f000 fc09 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001ce:	2304      	movs	r3, #4
 80001d0:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_10;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <segment_init+0xb8>)
 80001e2:	f000 fbfd 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001e6:	2304      	movs	r3, #4
 80001e8:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_11;
 80001ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001ee:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <segment_init+0xb8>)
 80001fa:	f000 fbf1 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001fe:	2304      	movs	r3, #4
 8000200:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_12;
 8000202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000206:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <segment_init+0xb8>)
 8000212:	f000 fbe5 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000216:	2304      	movs	r3, #4
 8000218:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_13;
 800021a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021e:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <segment_init+0xb8>)
 800022a:	f000 fbd9 	bl	80009e0 <mcal_gpio_init>

	segment_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 800022e:	2304      	movs	r3, #4
 8000230:	71bb      	strb	r3, [r7, #6]
	segment_cnf.gpio_pin_number=GPIO_PIN_14;
 8000232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000236:	80bb      	strh	r3, [r7, #4]
	segment_cnf.gpio_speed=max_speed_10;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOA, &segment_cnf);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <segment_init+0xb8>)
 8000242:	f000 fbcd 	bl	80009e0 <mcal_gpio_init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010800 	.word	0x40010800

08000254 <main>:
int main(void)
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0

	clk_init();
 800025a:	f7ff ff89 	bl	8000170 <clk_init>
	segment_init();
 800025e:	f7ff ff9b 	bl	8000198 <segment_init>
	LCD_INIT();
 8000262:	f000 fa61 	bl	8000728 <LCD_INIT>
	lcd_write_string("      hello");
 8000266:	482d      	ldr	r0, [pc, #180]	; (800031c <main+0xc8>)
 8000268:	f000 fa22 	bl	80006b0 <lcd_write_string>
	delay_ms(500);
 800026c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000270:	f000 f885 	bl	800037e <delay_ms>
	lcd_write_command(lcd_clear_display);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fa2f 	bl	80006d8 <lcd_write_command>
	unsigned short segment[]={0x01,0x4f,0x12,0x06,0x4c,0x24,0x20,0x0f,0x00,0x04};
 800027a:	4b29      	ldr	r3, [pc, #164]	; (8000320 <main+0xcc>)
 800027c:	1d3c      	adds	r4, r7, #4
 800027e:	461d      	mov	r5, r3
 8000280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000284:	682b      	ldr	r3, [r5, #0]
 8000286:	6023      	str	r3, [r4, #0]
	for(int i=0;i<10;i++)
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	e01c      	b.n	80002c8 <main+0x74>
	{
		lcd_write_char(i+48);
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	3330      	adds	r3, #48	; 0x30
 8000294:	b2db      	uxtb	r3, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f9e2 	bl	8000660 <lcd_write_char>
		mcal_gpio_write_port(GPIOA, segment[i]<<8);
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	f107 0220 	add.w	r2, r7, #32
 80002a4:	4413      	add	r3, r2
 80002a6:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80002aa:	021b      	lsls	r3, r3, #8
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	481c      	ldr	r0, [pc, #112]	; (8000324 <main+0xd0>)
 80002b2:	f000 fc50 	bl	8000b56 <mcal_gpio_write_port>
		delay(200);
 80002b6:	20c8      	movs	r0, #200	; 0xc8
 80002b8:	f000 f99e 	bl	80005f8 <delay>
		delay(200);
 80002bc:	20c8      	movs	r0, #200	; 0xc8
 80002be:	f000 f99b 	bl	80005f8 <delay>
	for(int i=0;i<10;i++)
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3301      	adds	r3, #1
 80002c6:	61fb      	str	r3, [r7, #28]
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	2b09      	cmp	r3, #9
 80002cc:	dddf      	ble.n	800028e <main+0x3a>
	}
	mcal_gpio_write_port(GPIOA,segment[8]<<8);
 80002ce:	8abb      	ldrh	r3, [r7, #20]
 80002d0:	021b      	lsls	r3, r3, #8
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	4619      	mov	r1, r3
 80002d6:	4813      	ldr	r0, [pc, #76]	; (8000324 <main+0xd0>)
 80002d8:	f000 fc3d 	bl	8000b56 <mcal_gpio_write_port>
	lcd_write_command(lcd_clear_display);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f9fb 	bl	80006d8 <lcd_write_command>
	lcd_write_string("keypad is ready!! ");
 80002e2:	4811      	ldr	r0, [pc, #68]	; (8000328 <main+0xd4>)
 80002e4:	f000 f9e4 	bl	80006b0 <lcd_write_string>
	delay_ms(500);
 80002e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ec:	f000 f847 	bl	800037e <delay_ms>
	lcd_write_command(lcd_clear_display);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 f9f1 	bl	80006d8 <lcd_write_command>
	keypad_init();
 80002f6:	f000 f85f 	bl	80003b8 <keypad_init>
	char x;

	while(1)
	{

		x=keypad_get_char();
 80002fa:	f000 f8b7 	bl	800046c <keypad_get_char>
 80002fe:	4603      	mov	r3, r0
 8000300:	76fb      	strb	r3, [r7, #27]
		switch(x)
 8000302:	7efb      	ldrb	r3, [r7, #27]
 8000304:	2b4e      	cmp	r3, #78	; 0x4e
 8000306:	d004      	beq.n	8000312 <main+0xbe>
		{
		case 'N': break;
		default :lcd_write_char(x);
 8000308:	7efb      	ldrb	r3, [r7, #27]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f9a8 	bl	8000660 <lcd_write_char>
 8000310:	e000      	b.n	8000314 <main+0xc0>
		case 'N': break;
 8000312:	bf00      	nop
		}
		delay(20);
 8000314:	2014      	movs	r0, #20
 8000316:	f000 f96f 	bl	80005f8 <delay>
		x=keypad_get_char();
 800031a:	e7ee      	b.n	80002fa <main+0xa6>
 800031c:	08000bd4 	.word	0x08000bd4
 8000320:	08000bf4 	.word	0x08000bf4
 8000324:	40010800 	.word	0x40010800
 8000328:	08000be0 	.word	0x08000be0

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 fc0b 	bl	8000b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff79 	bl	8000254 <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000370:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 8000374:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000378:	2000002c 	.word	0x2000002c

0800037c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_2_IRQHandler>

0800037e <delay_ms>:
 *      Author: Alfanan02
 */
#include"keypad.h"

 void delay_ms(int x)
{
 800037e:	b480      	push	{r7}
 8000380:	b085      	sub	sp, #20
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	for(int i=0;i<=x;i++)
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	e00c      	b.n	80003a6 <delay_ms+0x28>
		for(int j=0;j<=1000;j++);
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	e002      	b.n	8000398 <delay_ms+0x1a>
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	3301      	adds	r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800039e:	ddf8      	ble.n	8000392 <delay_ms+0x14>
	for(int i=0;i<=x;i++)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	ddee      	ble.n	800038c <delay_ms+0xe>
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <keypad_init>:
unsigned short keypad_col[]={k1,k2,k3,k4};
unsigned short keypad_row[]={kA,kB,kC,kD};

void keypad_init()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
	gpio_config keypad_cnf;

	keypad_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80003be:	2304      	movs	r3, #4
 80003c0:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=kA;
 80003c2:	2320      	movs	r3, #32
 80003c4:	80bb      	strh	r3, [r7, #4]
	keypad_cnf.gpio_speed=max_speed_10;
 80003c6:	2301      	movs	r3, #1
 80003c8:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4826      	ldr	r0, [pc, #152]	; (8000468 <keypad_init+0xb0>)
 80003d0:	f000 fb06 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80003d4:	2304      	movs	r3, #4
 80003d6:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=kB;
 80003d8:	2340      	movs	r3, #64	; 0x40
 80003da:	80bb      	strh	r3, [r7, #4]
	keypad_cnf.gpio_speed=max_speed_10;
 80003dc:	2301      	movs	r3, #1
 80003de:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4820      	ldr	r0, [pc, #128]	; (8000468 <keypad_init+0xb0>)
 80003e6:	f000 fafb 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80003ea:	2304      	movs	r3, #4
 80003ec:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=kC;
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	80bb      	strh	r3, [r7, #4]
	keypad_cnf.gpio_speed=max_speed_10;
 80003f2:	2301      	movs	r3, #1
 80003f4:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	481b      	ldr	r0, [pc, #108]	; (8000468 <keypad_init+0xb0>)
 80003fc:	f000 faf0 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000400:	2304      	movs	r3, #4
 8000402:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=kD;
 8000404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000408:	80bb      	strh	r3, [r7, #4]
	keypad_cnf.gpio_speed=max_speed_10;
 800040a:	2301      	movs	r3, #1
 800040c:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4815      	ldr	r0, [pc, #84]	; (8000468 <keypad_init+0xb0>)
 8000414:	f000 fae4 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_INPUT_FLO;
 8000418:	2301      	movs	r3, #1
 800041a:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=k1;
 800041c:	2301      	movs	r3, #1
 800041e:	80bb      	strh	r3, [r7, #4]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4810      	ldr	r0, [pc, #64]	; (8000468 <keypad_init+0xb0>)
 8000426:	f000 fadb 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_INPUT_FLO;
 800042a:	2301      	movs	r3, #1
 800042c:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=k2;
 800042e:	2302      	movs	r3, #2
 8000430:	80bb      	strh	r3, [r7, #4]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <keypad_init+0xb0>)
 8000438:	f000 fad2 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_INPUT_FLO;
 800043c:	2301      	movs	r3, #1
 800043e:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=k3;
 8000440:	2308      	movs	r3, #8
 8000442:	80bb      	strh	r3, [r7, #4]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4807      	ldr	r0, [pc, #28]	; (8000468 <keypad_init+0xb0>)
 800044a:	f000 fac9 	bl	80009e0 <mcal_gpio_init>

	keypad_cnf.gpio_mode=GPIO_MODE_INPUT_FLO;
 800044e:	2301      	movs	r3, #1
 8000450:	71bb      	strb	r3, [r7, #6]
	keypad_cnf.gpio_pin_number=k4;
 8000452:	2310      	movs	r3, #16
 8000454:	80bb      	strh	r3, [r7, #4]
	mcal_gpio_init(keypad_port, &keypad_cnf);
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4803      	ldr	r0, [pc, #12]	; (8000468 <keypad_init+0xb0>)
 800045c:	f000 fac0 	bl	80009e0 <mcal_gpio_init>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <keypad_get_char>:
char keypad_get_char()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

	for(int i=0;i<4;i++)
 8000472:	2300      	movs	r3, #0
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	e0b0      	b.n	80005da <keypad_get_char+0x16e>
	{
		delay_ms(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f7ff ff80 	bl	800037e <delay_ms>
		mcal_gpio_write_pin(keypad_port, keypad_row[0], 0);
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <keypad_get_char+0x180>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	485a      	ldr	r0, [pc, #360]	; (80005f0 <keypad_get_char+0x184>)
 8000488:	f000 fb47 	bl	8000b1a <mcal_gpio_write_pin>
		mcal_gpio_write_pin(keypad_port, keypad_row[1], 0);
 800048c:	4b57      	ldr	r3, [pc, #348]	; (80005ec <keypad_get_char+0x180>)
 800048e:	885b      	ldrh	r3, [r3, #2]
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	4856      	ldr	r0, [pc, #344]	; (80005f0 <keypad_get_char+0x184>)
 8000496:	f000 fb40 	bl	8000b1a <mcal_gpio_write_pin>
		mcal_gpio_write_pin(keypad_port, keypad_row[2], 0);
 800049a:	4b54      	ldr	r3, [pc, #336]	; (80005ec <keypad_get_char+0x180>)
 800049c:	889b      	ldrh	r3, [r3, #4]
 800049e:	2200      	movs	r2, #0
 80004a0:	4619      	mov	r1, r3
 80004a2:	4853      	ldr	r0, [pc, #332]	; (80005f0 <keypad_get_char+0x184>)
 80004a4:	f000 fb39 	bl	8000b1a <mcal_gpio_write_pin>
		mcal_gpio_write_pin(keypad_port, keypad_row[3], 0);
 80004a8:	4b50      	ldr	r3, [pc, #320]	; (80005ec <keypad_get_char+0x180>)
 80004aa:	88db      	ldrh	r3, [r3, #6]
 80004ac:	2200      	movs	r2, #0
 80004ae:	4619      	mov	r1, r3
 80004b0:	484f      	ldr	r0, [pc, #316]	; (80005f0 <keypad_get_char+0x184>)
 80004b2:	f000 fb32 	bl	8000b1a <mcal_gpio_write_pin>

		mcal_gpio_write_pin(keypad_port, keypad_row[i], 1);
 80004b6:	4a4d      	ldr	r2, [pc, #308]	; (80005ec <keypad_get_char+0x180>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	484b      	ldr	r0, [pc, #300]	; (80005f0 <keypad_get_char+0x184>)
 80004c4:	f000 fb29 	bl	8000b1a <mcal_gpio_write_pin>
		for(int j=0;j<4;j++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	e07e      	b.n	80005cc <keypad_get_char+0x160>
		{
			if(mcal_gpio_read_pin(keypad_port, keypad_col[j]))
 80004ce:	4a49      	ldr	r2, [pc, #292]	; (80005f4 <keypad_get_char+0x188>)
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d6:	4619      	mov	r1, r3
 80004d8:	4845      	ldr	r0, [pc, #276]	; (80005f0 <keypad_get_char+0x184>)
 80004da:	f000 fb06 	bl	8000aea <mcal_gpio_read_pin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d070      	beq.n	80005c6 <keypad_get_char+0x15a>
			{
				while(mcal_gpio_read_pin(keypad_port, keypad_col[j]));
 80004e4:	bf00      	nop
 80004e6:	4a43      	ldr	r2, [pc, #268]	; (80005f4 <keypad_get_char+0x188>)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	4619      	mov	r1, r3
 80004f0:	483f      	ldr	r0, [pc, #252]	; (80005f0 <keypad_get_char+0x184>)
 80004f2:	f000 fafa 	bl	8000aea <mcal_gpio_read_pin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f4      	bne.n	80004e6 <keypad_get_char+0x7a>
				switch(i){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d861      	bhi.n	80005c6 <keypad_get_char+0x15a>
 8000502:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <keypad_get_char+0x9c>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000519 	.word	0x08000519
 800050c:	08000541 	.word	0x08000541
 8000510:	08000569 	.word	0x08000569
 8000514:	08000591 	.word	0x08000591
				case (0):
										if (j == 0) return '7';
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <keypad_get_char+0xb6>
 800051e:	2337      	movs	r3, #55	; 0x37
 8000520:	e060      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 1) return '8';
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d101      	bne.n	800052c <keypad_get_char+0xc0>
 8000528:	2338      	movs	r3, #56	; 0x38
 800052a:	e05b      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 2) return '9';
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b02      	cmp	r3, #2
 8000530:	d101      	bne.n	8000536 <keypad_get_char+0xca>
 8000532:	2339      	movs	r3, #57	; 0x39
 8000534:	e056      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 3) return '/';
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d13d      	bne.n	80005b8 <keypad_get_char+0x14c>
 800053c:	232f      	movs	r3, #47	; 0x2f
 800053e:	e051      	b.n	80005e4 <keypad_get_char+0x178>
										break;
				case (1):
										if (j == 0) return '4';
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <keypad_get_char+0xde>
 8000546:	2334      	movs	r3, #52	; 0x34
 8000548:	e04c      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 1) return '5';
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d101      	bne.n	8000554 <keypad_get_char+0xe8>
 8000550:	2335      	movs	r3, #53	; 0x35
 8000552:	e047      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 2) return '6';
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d101      	bne.n	800055e <keypad_get_char+0xf2>
 800055a:	2336      	movs	r3, #54	; 0x36
 800055c:	e042      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 3) return '*';
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d12b      	bne.n	80005bc <keypad_get_char+0x150>
 8000564:	232a      	movs	r3, #42	; 0x2a
 8000566:	e03d      	b.n	80005e4 <keypad_get_char+0x178>
										break;
				case (2):
										if (j == 0) return '1';
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d101      	bne.n	8000572 <keypad_get_char+0x106>
 800056e:	2331      	movs	r3, #49	; 0x31
 8000570:	e038      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 1) return '2';
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <keypad_get_char+0x110>
 8000578:	2332      	movs	r3, #50	; 0x32
 800057a:	e033      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 2) return '3';
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d101      	bne.n	8000586 <keypad_get_char+0x11a>
 8000582:	2333      	movs	r3, #51	; 0x33
 8000584:	e02e      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 3) return '-';
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d119      	bne.n	80005c0 <keypad_get_char+0x154>
 800058c:	232d      	movs	r3, #45	; 0x2d
 800058e:	e029      	b.n	80005e4 <keypad_get_char+0x178>
										break;
				case (3):
										if (j == 0) return '?';
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <keypad_get_char+0x12e>
 8000596:	233f      	movs	r3, #63	; 0x3f
 8000598:	e024      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 1) return '0';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <keypad_get_char+0x138>
 80005a0:	2330      	movs	r3, #48	; 0x30
 80005a2:	e01f      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 2) return '=';
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d101      	bne.n	80005ae <keypad_get_char+0x142>
 80005aa:	233d      	movs	r3, #61	; 0x3d
 80005ac:	e01a      	b.n	80005e4 <keypad_get_char+0x178>
										else if (j == 3) return '+';
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d107      	bne.n	80005c4 <keypad_get_char+0x158>
 80005b4:	232b      	movs	r3, #43	; 0x2b
 80005b6:	e015      	b.n	80005e4 <keypad_get_char+0x178>
										break;
 80005b8:	bf00      	nop
 80005ba:	e004      	b.n	80005c6 <keypad_get_char+0x15a>
										break;
 80005bc:	bf00      	nop
 80005be:	e002      	b.n	80005c6 <keypad_get_char+0x15a>
										break;
 80005c0:	bf00      	nop
 80005c2:	e000      	b.n	80005c6 <keypad_get_char+0x15a>
										break;
 80005c4:	bf00      	nop
		for(int j=0;j<4;j++)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	f77f af7d 	ble.w	80004ce <keypad_get_char+0x62>
	for(int i=0;i<4;i++)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	f77f af4b 	ble.w	8000478 <keypad_get_char+0xc>
				}
			}
		}

	}
	return 'N';
 80005e2:	234e      	movs	r3, #78	; 0x4e
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000008 	.word	0x20000008
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000000 	.word	0x20000000

080005f8 <delay>:
 */

#include"lcd.h"

void delay(char x)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<=x;i++)
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	e00c      	b.n	8000622 <delay+0x2a>
		for(int j=0;j<=1000;j++);
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	e002      	b.n	8000614 <delay+0x1c>
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	3301      	adds	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800061a:	ddf8      	ble.n	800060e <delay+0x16>
	for(int i=0;i<=x;i++)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	429a      	cmp	r2, r3
 8000628:	ddee      	ble.n	8000608 <delay+0x10>
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <kick>:
void kick()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	mcal_gpio_write_pin(LCD_CTR, EN, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <kick+0x28>)
 8000640:	f000 fa6b 	bl	8000b1a <mcal_gpio_write_pin>
	delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f7ff ffd7 	bl	80005f8 <delay>
	mcal_gpio_write_pin(LCD_CTR, EN, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <kick+0x28>)
 8000652:	f000 fa62 	bl	8000b1a <mcal_gpio_write_pin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010c00 	.word	0x40010c00

08000660 <lcd_write_char>:
void lcd_write_char(char text)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_write_port(LCD_PORT, text<<(get_pos_odr(D0)));
 800066a:	79fc      	ldrb	r4, [r7, #7]
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f95c 	bl	800092a <get_pos_odr>
 8000672:	4603      	mov	r3, r0
 8000674:	fa04 f303 	lsl.w	r3, r4, r3
 8000678:	b29b      	uxth	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <lcd_write_char+0x48>)
 800067e:	f000 fa6a 	bl	8000b56 <mcal_gpio_write_port>
	mcal_gpio_write_pin(LCD_CTR, RS,1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <lcd_write_char+0x4c>)
 800068a:	f000 fa46 	bl	8000b1a <mcal_gpio_write_pin>
	mcal_gpio_write_pin(LCD_CTR,RW,0);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <lcd_write_char+0x4c>)
 8000696:	f000 fa40 	bl	8000b1a <mcal_gpio_write_pin>
	kick();
 800069a:	f7ff ffcb 	bl	8000634 <kick>
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <lcd_write_string>:
void lcd_write_string(char *text)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	while(*text!='\0')
 80006b8:	e006      	b.n	80006c8 <lcd_write_string+0x18>
		lcd_write_char(*text++);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffcc 	bl	8000660 <lcd_write_char>
	while(*text!='\0')
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f4      	bne.n	80006ba <lcd_write_string+0xa>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_write_command>:
void lcd_write_command(char command)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_write_port(LCD_PORT, command<<get_pos_odr(D0));
 80006e2:	79fc      	ldrb	r4, [r7, #7]
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 f920 	bl	800092a <get_pos_odr>
 80006ea:	4603      	mov	r3, r0
 80006ec:	fa04 f303 	lsl.w	r3, r4, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <lcd_write_command+0x48>)
 80006f6:	f000 fa2e 	bl	8000b56 <mcal_gpio_write_port>
	mcal_gpio_write_pin(LCD_CTR, RS,0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <lcd_write_command+0x4c>)
 8000702:	f000 fa0a 	bl	8000b1a <mcal_gpio_write_pin>
	mcal_gpio_write_pin(LCD_CTR,RW,0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <lcd_write_command+0x4c>)
 800070e:	f000 fa04 	bl	8000b1a <mcal_gpio_write_pin>
	kick();
 8000712:	f7ff ff8f 	bl	8000634 <kick>
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	bf00      	nop
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00

08000728 <LCD_INIT>:
void LCD_INIT()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	delay(5);
 800072e:	2005      	movs	r0, #5
 8000730:	f7ff ff62 	bl	80005f8 <delay>
	gpio_config gpio_cnf;

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000734:	2304      	movs	r3, #4
 8000736:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D0;
 8000738:	2301      	movs	r3, #1
 800073a:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 800073c:	2301      	movs	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4849      	ldr	r0, [pc, #292]	; (800086c <LCD_INIT+0x144>)
 8000746:	f000 f94b 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 800074a:	2304      	movs	r3, #4
 800074c:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D1;
 800074e:	2302      	movs	r3, #2
 8000750:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4844      	ldr	r0, [pc, #272]	; (800086c <LCD_INIT+0x144>)
 800075c:	f000 f940 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000760:	2304      	movs	r3, #4
 8000762:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D2;
 8000764:	2304      	movs	r3, #4
 8000766:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 8000768:	2301      	movs	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	483e      	ldr	r0, [pc, #248]	; (800086c <LCD_INIT+0x144>)
 8000772:	f000 f935 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000776:	2304      	movs	r3, #4
 8000778:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D3;
 800077a:	2308      	movs	r3, #8
 800077c:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 800077e:	2301      	movs	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4839      	ldr	r0, [pc, #228]	; (800086c <LCD_INIT+0x144>)
 8000788:	f000 f92a 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 800078c:	2304      	movs	r3, #4
 800078e:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D4;
 8000790:	2310      	movs	r3, #16
 8000792:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 8000794:	2301      	movs	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4833      	ldr	r0, [pc, #204]	; (800086c <LCD_INIT+0x144>)
 800079e:	f000 f91f 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80007a2:	2304      	movs	r3, #4
 80007a4:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D5;
 80007a6:	2320      	movs	r3, #32
 80007a8:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 80007aa:	2301      	movs	r3, #1
 80007ac:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	482e      	ldr	r0, [pc, #184]	; (800086c <LCD_INIT+0x144>)
 80007b4:	f000 f914 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80007b8:	2304      	movs	r3, #4
 80007ba:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D6;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 80007c0:	2301      	movs	r3, #1
 80007c2:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <LCD_INIT+0x144>)
 80007ca:	f000 f909 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80007ce:	2304      	movs	r3, #4
 80007d0:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=D7;
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_PORT, &gpio_cnf);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <LCD_INIT+0x144>)
 80007e0:	f000 f8fe 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80007e4:	2304      	movs	r3, #4
 80007e6:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=EN;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 80007ee:	2301      	movs	r3, #1
 80007f0:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_CTR, &gpio_cnf);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	481e      	ldr	r0, [pc, #120]	; (8000870 <LCD_INIT+0x148>)
 80007f8:	f000 f8f2 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80007fc:	2304      	movs	r3, #4
 80007fe:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=RS;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 8000806:	2301      	movs	r3, #1
 8000808:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_CTR, &gpio_cnf);
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <LCD_INIT+0x148>)
 8000810:	f000 f8e6 	bl	80009e0 <mcal_gpio_init>

	gpio_cnf.gpio_mode=GPIO_MODE_OUTPUT_PP;
 8000814:	2304      	movs	r3, #4
 8000816:	71bb      	strb	r3, [r7, #6]
	gpio_cnf.gpio_pin_number=RW;
 8000818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800081c:	80bb      	strh	r3, [r7, #4]
	gpio_cnf.gpio_speed=max_speed_10;
 800081e:	2301      	movs	r3, #1
 8000820:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(LCD_CTR, &gpio_cnf);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <LCD_INIT+0x148>)
 8000828:	f000 f8da 	bl	80009e0 <mcal_gpio_init>


	mcal_gpio_write_pin(LCD_CTR, EN, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <LCD_INIT+0x148>)
 8000834:	f000 f971 	bl	8000b1a <mcal_gpio_write_pin>
	mcal_gpio_write_pin(LCD_CTR, RW, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <LCD_INIT+0x148>)
 8000840:	f000 f96b 	bl	8000b1a <mcal_gpio_write_pin>
	mcal_gpio_write_pin(LCD_CTR, RS, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <LCD_INIT+0x148>)
 800084c:	f000 f965 	bl	8000b1a <mcal_gpio_write_pin>

	lcd_write_command(lcd_set_16_2);
 8000850:	2038      	movs	r0, #56	; 0x38
 8000852:	f7ff ff41 	bl	80006d8 <lcd_write_command>
	lcd_write_command(lcd_on_cursor_on);
 8000856:	200f      	movs	r0, #15
 8000858:	f7ff ff3e 	bl	80006d8 <lcd_write_command>
	lcd_write_command(lcd_first_line);
 800085c:	2080      	movs	r0, #128	; 0x80
 800085e:	f7ff ff3b 	bl	80006d8 <lcd_write_command>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010800 	.word	0x40010800
 8000870:	40010c00 	.word	0x40010c00

08000874 <get_pos>:
 *  Created on: Sep 5, 2023
 *      Author: Alfanan02
 */
#include "stm32f103x6_gpio_driver.h"
short get_pos(short pin_number)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	2b80      	cmp	r3, #128	; 0x80
 8000884:	d03b      	beq.n	80008fe <get_pos+0x8a>
 8000886:	2b80      	cmp	r3, #128	; 0x80
 8000888:	dc11      	bgt.n	80008ae <get_pos+0x3a>
 800088a:	2b08      	cmp	r3, #8
 800088c:	d02f      	beq.n	80008ee <get_pos+0x7a>
 800088e:	2b08      	cmp	r3, #8
 8000890:	dc06      	bgt.n	80008a0 <get_pos+0x2c>
 8000892:	2b02      	cmp	r3, #2
 8000894:	d027      	beq.n	80008e6 <get_pos+0x72>
 8000896:	2b04      	cmp	r3, #4
 8000898:	d027      	beq.n	80008ea <get_pos+0x76>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d021      	beq.n	80008e2 <get_pos+0x6e>
 800089e:	e03e      	b.n	800091e <get_pos+0xaa>
 80008a0:	2b20      	cmp	r3, #32
 80008a2:	d028      	beq.n	80008f6 <get_pos+0x82>
 80008a4:	2b40      	cmp	r3, #64	; 0x40
 80008a6:	d028      	beq.n	80008fa <get_pos+0x86>
 80008a8:	2b10      	cmp	r3, #16
 80008aa:	d022      	beq.n	80008f2 <get_pos+0x7e>
 80008ac:	e037      	b.n	800091e <get_pos+0xaa>
 80008ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b2:	d02c      	beq.n	800090e <get_pos+0x9a>
 80008b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b8:	dc09      	bgt.n	80008ce <get_pos+0x5a>
 80008ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008be:	d022      	beq.n	8000906 <get_pos+0x92>
 80008c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c4:	d021      	beq.n	800090a <get_pos+0x96>
 80008c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ca:	d01a      	beq.n	8000902 <get_pos+0x8e>
 80008cc:	e027      	b.n	800091e <get_pos+0xaa>
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d2:	d020      	beq.n	8000916 <get_pos+0xa2>
 80008d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008d8:	d01f      	beq.n	800091a <get_pos+0xa6>
 80008da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008de:	d018      	beq.n	8000912 <get_pos+0x9e>
 80008e0:	e01d      	b.n	800091e <get_pos+0xaa>
	{
	case GPIO_PIN_0 : return 0;break;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e01c      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_1 : return 1;break;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e01a      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_2 : return 2;break;
 80008ea:	2302      	movs	r3, #2
 80008ec:	e018      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_3 : return 3;break;
 80008ee:	2303      	movs	r3, #3
 80008f0:	e016      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_4 : return 4;break;
 80008f2:	2304      	movs	r3, #4
 80008f4:	e014      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_5 : return 5;break;
 80008f6:	2305      	movs	r3, #5
 80008f8:	e012      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_6 : return 6;break;
 80008fa:	2306      	movs	r3, #6
 80008fc:	e010      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_7 : return 7;break;
 80008fe:	2307      	movs	r3, #7
 8000900:	e00e      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_8 : return 0;break;
 8000902:	2300      	movs	r3, #0
 8000904:	e00c      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_9 : return 1;break;
 8000906:	2301      	movs	r3, #1
 8000908:	e00a      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_10 : return 2;break;
 800090a:	2302      	movs	r3, #2
 800090c:	e008      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_11 : return 3;break;
 800090e:	2303      	movs	r3, #3
 8000910:	e006      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_12 : return 4;break;
 8000912:	2304      	movs	r3, #4
 8000914:	e004      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_13: return 5;break;
 8000916:	2305      	movs	r3, #5
 8000918:	e002      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_14 : return 6;break;
 800091a:	2306      	movs	r3, #6
 800091c:	e000      	b.n	8000920 <get_pos+0xac>
	case GPIO_PIN_15 : return 7;break;


	}
return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <get_pos_odr>:

short get_pos_odr(short pin_number)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 8000934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000938:	2b80      	cmp	r3, #128	; 0x80
 800093a:	d03b      	beq.n	80009b4 <get_pos_odr+0x8a>
 800093c:	2b80      	cmp	r3, #128	; 0x80
 800093e:	dc11      	bgt.n	8000964 <get_pos_odr+0x3a>
 8000940:	2b08      	cmp	r3, #8
 8000942:	d02f      	beq.n	80009a4 <get_pos_odr+0x7a>
 8000944:	2b08      	cmp	r3, #8
 8000946:	dc06      	bgt.n	8000956 <get_pos_odr+0x2c>
 8000948:	2b02      	cmp	r3, #2
 800094a:	d027      	beq.n	800099c <get_pos_odr+0x72>
 800094c:	2b04      	cmp	r3, #4
 800094e:	d027      	beq.n	80009a0 <get_pos_odr+0x76>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d021      	beq.n	8000998 <get_pos_odr+0x6e>
 8000954:	e03e      	b.n	80009d4 <get_pos_odr+0xaa>
 8000956:	2b20      	cmp	r3, #32
 8000958:	d028      	beq.n	80009ac <get_pos_odr+0x82>
 800095a:	2b40      	cmp	r3, #64	; 0x40
 800095c:	d028      	beq.n	80009b0 <get_pos_odr+0x86>
 800095e:	2b10      	cmp	r3, #16
 8000960:	d022      	beq.n	80009a8 <get_pos_odr+0x7e>
 8000962:	e037      	b.n	80009d4 <get_pos_odr+0xaa>
 8000964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000968:	d02c      	beq.n	80009c4 <get_pos_odr+0x9a>
 800096a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800096e:	dc09      	bgt.n	8000984 <get_pos_odr+0x5a>
 8000970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000974:	d022      	beq.n	80009bc <get_pos_odr+0x92>
 8000976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097a:	d021      	beq.n	80009c0 <get_pos_odr+0x96>
 800097c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000980:	d01a      	beq.n	80009b8 <get_pos_odr+0x8e>
 8000982:	e027      	b.n	80009d4 <get_pos_odr+0xaa>
 8000984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000988:	d020      	beq.n	80009cc <get_pos_odr+0xa2>
 800098a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800098e:	d01f      	beq.n	80009d0 <get_pos_odr+0xa6>
 8000990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000994:	d018      	beq.n	80009c8 <get_pos_odr+0x9e>
 8000996:	e01d      	b.n	80009d4 <get_pos_odr+0xaa>
	{
	case GPIO_PIN_0 : return 0;break;
 8000998:	2300      	movs	r3, #0
 800099a:	e01c      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_1 : return 1;break;
 800099c:	2301      	movs	r3, #1
 800099e:	e01a      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_2 : return 2;break;
 80009a0:	2302      	movs	r3, #2
 80009a2:	e018      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_3 : return 3;break;
 80009a4:	2303      	movs	r3, #3
 80009a6:	e016      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_4 : return 4;break;
 80009a8:	2304      	movs	r3, #4
 80009aa:	e014      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_5 : return 5;break;
 80009ac:	2305      	movs	r3, #5
 80009ae:	e012      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_6 : return 6;break;
 80009b0:	2306      	movs	r3, #6
 80009b2:	e010      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_7 : return 7;break;
 80009b4:	2307      	movs	r3, #7
 80009b6:	e00e      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_8 : return 8;break;
 80009b8:	2308      	movs	r3, #8
 80009ba:	e00c      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_9 : return 9;break;
 80009bc:	2309      	movs	r3, #9
 80009be:	e00a      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_10 : return 10;break;
 80009c0:	230a      	movs	r3, #10
 80009c2:	e008      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_11 : return 11;break;
 80009c4:	230b      	movs	r3, #11
 80009c6:	e006      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_12 : return 12;break;
 80009c8:	230c      	movs	r3, #12
 80009ca:	e004      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_13: return 13;break;
 80009cc:	230d      	movs	r3, #13
 80009ce:	e002      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_14 : return 14;break;
 80009d0:	230e      	movs	r3, #14
 80009d2:	e000      	b.n	80009d6 <get_pos_odr+0xac>
	case GPIO_PIN_15 : return 15;break;


	}
return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <mcal_gpio_init>:
//brief:intialize pins
//param[in]:gpiox: to select port and pin
//param[in]:config:to config pin
//
void mcal_gpio_init(GPIO *gpiox,gpio_config *config)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	short PIN_config;
	volatile unsigned int *config_reg=NULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	config_reg=(config->gpio_pin_number<GPIO_PIN_8)?&gpiox->CRL:&gpiox->CRH;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f4:	2bff      	cmp	r3, #255	; 0xff
 80009f6:	dc01      	bgt.n	80009fc <mcal_gpio_init+0x1c>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	e001      	b.n	8000a00 <mcal_gpio_init+0x20>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3304      	adds	r3, #4
 8000a00:	60bb      	str	r3, [r7, #8]
	(*config_reg)&=~(0xf<<(get_pos(config->gpio_pin_number)*4));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff33 	bl	8000874 <get_pos>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	601a      	str	r2, [r3, #0]

	if( config->gpio_mode==GPIO_MODE_OUTPUT_AF_OD ||config->gpio_mode==GPIO_MODE_OUTPUT_AF_PP||config->gpio_mode== GPIO_MODE_OUTPUT_OD||config->gpio_mode==GPIO_MODE_OUTPUT_PP)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d00b      	beq.n	8000a44 <mcal_gpio_init+0x64>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d007      	beq.n	8000a44 <mcal_gpio_init+0x64>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d003      	beq.n	8000a44 <mcal_gpio_init+0x64>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d10d      	bne.n	8000a60 <mcal_gpio_init+0x80>
		{PIN_config = ((config->gpio_mode - 4)<<2 ) | ((config->gpio_speed) & (0X0F));}
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	3b04      	subs	r3, #4
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	78db      	ldrb	r3, [r3, #3]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	81fb      	strh	r3, [r7, #14]
 8000a5e:	e02f      	b.n	8000ac0 <mcal_gpio_init+0xe0>


	else
	{
		if(config->gpio_mode==GPIO_MODE_ANALOG ||config->gpio_mode==GPIO_MODE_INPUT_FLO)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <mcal_gpio_init+0x90>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d104      	bne.n	8000a7a <mcal_gpio_init+0x9a>
		{
			PIN_config=config->gpio_mode<<2;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e022      	b.n	8000ac0 <mcal_gpio_init+0xe0>

		}
		else if(config->gpio_mode== GPIO_MODE_AF_INPUT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d102      	bne.n	8000a88 <mcal_gpio_init+0xa8>
		{
			PIN_config=GPIO_MODE_INPUT_FLO<<2;
 8000a82:	2304      	movs	r3, #4
 8000a84:	81fb      	strh	r3, [r7, #14]
 8000a86:	e01b      	b.n	8000ac0 <mcal_gpio_init+0xe0>
		}
		else
		{

			PIN_config=GPIO_MODE_INPUT_PU<<2;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	81fb      	strh	r3, [r7, #14]
			if(config->gpio_mode == GPIO_MODE_INPUT_PU)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	789b      	ldrb	r3, [r3, #2]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d108      	bne.n	8000aa6 <mcal_gpio_init+0xc6>
			{
				gpiox->ODR|=(config->gpio_pin_number);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	e00c      	b.n	8000ac0 <mcal_gpio_init+0xe0>

			}
			else if(config->gpio_mode == GPIO_MODE_INPUT_PD)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d108      	bne.n	8000ac0 <mcal_gpio_init+0xe0>
			{
				gpiox->ODR&=~(config->gpio_pin_number);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	60da      	str	r2, [r3, #12]


	}


	*config_reg|=(PIN_config<<(get_pos(config->gpio_pin_number)*4));
 8000ac0:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fed2 	bl	8000874 <get_pos>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	fa04 f203 	lsl.w	r2, r4, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <mcal_gpio_read_pin>:
//brief:read pins data
//param[in]:gpiox: to select port and pin
//param[in]:pin_number
//param[out]:pin status
char mcal_gpio_read_pin(GPIO *gpiox,unsigned short pin_number)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
	short bit_status;
	if( (gpiox->IDR & pin_number) !=0)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <mcal_gpio_read_pin+0x1e>
	{
		bit_status=1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	81fb      	strh	r3, [r7, #14]
 8000b06:	e001      	b.n	8000b0c <mcal_gpio_read_pin+0x22>
	}
	else
		bit_status=0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	81fb      	strh	r3, [r7, #14]
	return bit_status;
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <mcal_gpio_write_pin>:
	return port_status;
}


void mcal_gpio_write_pin(GPIO *gpiox,unsigned short pin_number,char val)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	460b      	mov	r3, r1
 8000b24:	807b      	strh	r3, [r7, #2]
 8000b26:	4613      	mov	r3, r2
 8000b28:	707b      	strb	r3, [r7, #1]
		if(val!=0)
 8000b2a:	787b      	ldrb	r3, [r7, #1]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <mcal_gpio_write_pin+0x24>
			gpiox->ODR|=pin_number;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60da      	str	r2, [r3, #12]
		else
			gpiox->ODR&=~pin_number;
}
 8000b3c:	e006      	b.n	8000b4c <mcal_gpio_write_pin+0x32>
			gpiox->ODR&=~pin_number;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <mcal_gpio_write_port>:
void mcal_gpio_write_port(GPIO *gpiox,unsigned short val)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
	gpiox->ODR=val;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60da      	str	r2, [r3, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
	...

08000b74 <__libc_init_array>:
 8000b74:	b570      	push	{r4, r5, r6, lr}
 8000b76:	2500      	movs	r5, #0
 8000b78:	4e0c      	ldr	r6, [pc, #48]	; (8000bac <__libc_init_array+0x38>)
 8000b7a:	4c0d      	ldr	r4, [pc, #52]	; (8000bb0 <__libc_init_array+0x3c>)
 8000b7c:	1ba4      	subs	r4, r4, r6
 8000b7e:	10a4      	asrs	r4, r4, #2
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	d109      	bne.n	8000b98 <__libc_init_array+0x24>
 8000b84:	f000 f81a 	bl	8000bbc <_init>
 8000b88:	2500      	movs	r5, #0
 8000b8a:	4e0a      	ldr	r6, [pc, #40]	; (8000bb4 <__libc_init_array+0x40>)
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <__libc_init_array+0x44>)
 8000b8e:	1ba4      	subs	r4, r4, r6
 8000b90:	10a4      	asrs	r4, r4, #2
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d105      	bne.n	8000ba2 <__libc_init_array+0x2e>
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
 8000b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b9c:	4798      	blx	r3
 8000b9e:	3501      	adds	r5, #1
 8000ba0:	e7ee      	b.n	8000b80 <__libc_init_array+0xc>
 8000ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba6:	4798      	blx	r3
 8000ba8:	3501      	adds	r5, #1
 8000baa:	e7f2      	b.n	8000b92 <__libc_init_array+0x1e>
 8000bac:	08000c08 	.word	0x08000c08
 8000bb0:	08000c08 	.word	0x08000c08
 8000bb4:	08000c08 	.word	0x08000c08
 8000bb8:	08000c0c 	.word	0x08000c0c

08000bbc <_init>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	bf00      	nop
 8000bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc2:	bc08      	pop	{r3}
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	4770      	bx	lr

08000bc8 <_fini>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	bf00      	nop
 8000bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bce:	bc08      	pop	{r3}
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	4770      	bx	lr
