
stm32f103x6 drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000538  08000540  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000538  08000538  00010540  2**0
                  CONTENTS
  4 .ARM          00000000  08000538  08000538  00010540  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000538  08000540  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000540  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000540  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000178f  00000000  00000000  00010569  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003d3  00000000  00000000  00011cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003a0  00000000  00000000  000120cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b0  00000000  00000000  00012470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00012520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001ee8  00000000  00000000  000125a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d7b  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007d85  00000000  00000000  0001520b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001cf90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f0  00000000  00000000  0001d00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000520 	.word	0x08000520

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000520 	.word	0x08000520

08000170 <clk_init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void clk_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

		RCC_GPIOA_CLK_EN;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clk_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clk_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clk_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clk_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <gpio_init>:
void gpio_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	gpio_config pin_config;
	//set pin_1 port_a as a pull up input
	pin_config.gpio_pin_number=GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	pin_config.gpio_mode=GPIO_MODE_INPUT_PU;
 80001a2:	2302      	movs	r3, #2
 80001a4:	71bb      	strb	r3, [r7, #6]
	mcal_gpio_init(GPIOA, &pin_config);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <gpio_init+0x64>)
 80001ac:	f000 f8e6 	bl	800037c <mcal_gpio_init>
	//set pin_13 port_a as a pull down input
	pin_config.gpio_pin_number=GPIO_PIN_13;
 80001b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b4:	80bb      	strh	r3, [r7, #4]
	pin_config.gpio_mode=GPIO_MODE_INPUT_PD;
 80001b6:	2303      	movs	r3, #3
 80001b8:	71bb      	strb	r3, [r7, #6]
	mcal_gpio_init(GPIOA, &pin_config);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <gpio_init+0x64>)
 80001c0:	f000 f8dc 	bl	800037c <mcal_gpio_init>
	//set pin_13 port_b as a push_pull output
	pin_config.gpio_pin_number=GPIO_PIN_13;
 80001c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c8:	80bb      	strh	r3, [r7, #4]
	pin_config.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001ca:	2304      	movs	r3, #4
 80001cc:	71bb      	strb	r3, [r7, #6]
	pin_config.gpio_speed=max_speed_10;
 80001ce:	2301      	movs	r3, #1
 80001d0:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOB, &pin_config);
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	480a      	ldr	r0, [pc, #40]	; (8000200 <gpio_init+0x68>)
 80001d8:	f000 f8d0 	bl	800037c <mcal_gpio_init>
	//set pin_1 port_b as a push_pull output
	pin_config.gpio_pin_number=GPIO_PIN_1;
 80001dc:	2302      	movs	r3, #2
 80001de:	80bb      	strh	r3, [r7, #4]
	pin_config.gpio_mode=GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	pin_config.gpio_speed=max_speed_10;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	mcal_gpio_init(GPIOB, &pin_config);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <gpio_init+0x68>)
 80001ee:	f000 f8c5 	bl	800037c <mcal_gpio_init>



}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <main>:
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	clk_init();
 800020a:	f7ff ffb1 	bl	8000170 <clk_init>
	gpio_init();
 800020e:	f7ff ffc3 	bl	8000198 <gpio_init>
	for(;;)
	{
		if(mcal_gpio_read_pin(GPIOA, GPIO_PIN_1)==0)
 8000212:	2102      	movs	r1, #2
 8000214:	4815      	ldr	r0, [pc, #84]	; (800026c <main+0x68>)
 8000216:	f000 f936 	bl	8000486 <mcal_gpio_read_pin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d10b      	bne.n	8000238 <main+0x34>
			{
			while(!mcal_gpio_read_pin(GPIOA, GPIO_PIN_1));
 8000220:	bf00      	nop
 8000222:	2102      	movs	r1, #2
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <main+0x68>)
 8000226:	f000 f92e 	bl	8000486 <mcal_gpio_read_pin>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f8      	beq.n	8000222 <main+0x1e>
			mcal_gpio_toggle_pin(GPIOB, GPIO_PIN_1);
 8000230:	2102      	movs	r1, #2
 8000232:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x6c>)
 8000234:	f000 f93f 	bl	80004b6 <mcal_gpio_toggle_pin>
			}
		if(mcal_gpio_read_pin(GPIOA, GPIO_PIN_13)==1)
 8000238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <main+0x68>)
 800023e:	f000 f922 	bl	8000486 <mcal_gpio_read_pin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b01      	cmp	r3, #1
 8000246:	d104      	bne.n	8000252 <main+0x4e>
					{
					mcal_gpio_toggle_pin(GPIOB, GPIO_PIN_13);
 8000248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <main+0x6c>)
 800024e:	f000 f932 	bl	80004b6 <mcal_gpio_toggle_pin>
					}
for(int i=0;i<=50000;i++);
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	e002      	b.n	800025e <main+0x5a>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3301      	adds	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000264:	4293      	cmp	r3, r2
 8000266:	ddf7      	ble.n	8000258 <main+0x54>
		if(mcal_gpio_read_pin(GPIOA, GPIO_PIN_1)==0)
 8000268:	e7d3      	b.n	8000212 <main+0xe>
 800026a:	bf00      	nop
 800026c:	40010800 	.word	0x40010800
 8000270:	40010c00 	.word	0x40010c00

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f919 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffad 	bl	8000204 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000540 	.word	0x08000540
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>

080002c6 <get_pos>:
 *  Created on: Sep 5, 2023
 *      Author: Alfanan02
 */
#include "stm32f103x6_gpio_driver.h"
short get_pos(short pin_number)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b083      	sub	sp, #12
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 80002d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002d4:	2b80      	cmp	r3, #128	; 0x80
 80002d6:	d03b      	beq.n	8000350 <get_pos+0x8a>
 80002d8:	2b80      	cmp	r3, #128	; 0x80
 80002da:	dc11      	bgt.n	8000300 <get_pos+0x3a>
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d02f      	beq.n	8000340 <get_pos+0x7a>
 80002e0:	2b08      	cmp	r3, #8
 80002e2:	dc06      	bgt.n	80002f2 <get_pos+0x2c>
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d027      	beq.n	8000338 <get_pos+0x72>
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d027      	beq.n	800033c <get_pos+0x76>
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d021      	beq.n	8000334 <get_pos+0x6e>
 80002f0:	e03e      	b.n	8000370 <get_pos+0xaa>
 80002f2:	2b20      	cmp	r3, #32
 80002f4:	d028      	beq.n	8000348 <get_pos+0x82>
 80002f6:	2b40      	cmp	r3, #64	; 0x40
 80002f8:	d028      	beq.n	800034c <get_pos+0x86>
 80002fa:	2b10      	cmp	r3, #16
 80002fc:	d022      	beq.n	8000344 <get_pos+0x7e>
 80002fe:	e037      	b.n	8000370 <get_pos+0xaa>
 8000300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000304:	d02c      	beq.n	8000360 <get_pos+0x9a>
 8000306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800030a:	dc09      	bgt.n	8000320 <get_pos+0x5a>
 800030c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000310:	d022      	beq.n	8000358 <get_pos+0x92>
 8000312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000316:	d021      	beq.n	800035c <get_pos+0x96>
 8000318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800031c:	d01a      	beq.n	8000354 <get_pos+0x8e>
 800031e:	e027      	b.n	8000370 <get_pos+0xaa>
 8000320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000324:	d020      	beq.n	8000368 <get_pos+0xa2>
 8000326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800032a:	d01f      	beq.n	800036c <get_pos+0xa6>
 800032c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000330:	d018      	beq.n	8000364 <get_pos+0x9e>
 8000332:	e01d      	b.n	8000370 <get_pos+0xaa>
	{
	case GPIO_PIN_0 : return 0;break;
 8000334:	2300      	movs	r3, #0
 8000336:	e01c      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_1 : return 1;break;
 8000338:	2301      	movs	r3, #1
 800033a:	e01a      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_2 : return 2;break;
 800033c:	2302      	movs	r3, #2
 800033e:	e018      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_3 : return 3;break;
 8000340:	2303      	movs	r3, #3
 8000342:	e016      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_4 : return 4;break;
 8000344:	2304      	movs	r3, #4
 8000346:	e014      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_5 : return 5;break;
 8000348:	2305      	movs	r3, #5
 800034a:	e012      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_6 : return 6;break;
 800034c:	2306      	movs	r3, #6
 800034e:	e010      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_7 : return 7;break;
 8000350:	2307      	movs	r3, #7
 8000352:	e00e      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_8 : return 0;break;
 8000354:	2300      	movs	r3, #0
 8000356:	e00c      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_9 : return 1;break;
 8000358:	2301      	movs	r3, #1
 800035a:	e00a      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_10 : return 2;break;
 800035c:	2302      	movs	r3, #2
 800035e:	e008      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_11 : return 3;break;
 8000360:	2303      	movs	r3, #3
 8000362:	e006      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_12 : return 4;break;
 8000364:	2304      	movs	r3, #4
 8000366:	e004      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_13: return 5;break;
 8000368:	2305      	movs	r3, #5
 800036a:	e002      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_14 : return 6;break;
 800036c:	2306      	movs	r3, #6
 800036e:	e000      	b.n	8000372 <get_pos+0xac>
	case GPIO_PIN_15 : return 7;break;


	}
return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <mcal_gpio_init>:
//brief:intialize pins
//param[in]:gpiox: to select port and pin
//param[in]:config:to config pin
//
void mcal_gpio_init(GPIO *gpiox,gpio_config *config)
{
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	short PIN_config;
	volatile unsigned int *config_reg=NULL;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
	config_reg=(config->gpio_pin_number<GPIO_PIN_8)?&gpiox->CRL:&gpiox->CRH;
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000390:	2bff      	cmp	r3, #255	; 0xff
 8000392:	dc01      	bgt.n	8000398 <mcal_gpio_init+0x1c>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	e001      	b.n	800039c <mcal_gpio_init+0x20>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3304      	adds	r3, #4
 800039c:	60bb      	str	r3, [r7, #8]
	(*config_reg)&=~(0xf<<(get_pos(config->gpio_pin_number)*4));
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff8e 	bl	80002c6 <get_pos>
 80003aa:	4603      	mov	r3, r0
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	220f      	movs	r2, #15
 80003b0:	fa02 f303 	lsl.w	r3, r2, r3
 80003b4:	43da      	mvns	r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	401a      	ands	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	601a      	str	r2, [r3, #0]

	if( config->gpio_mode==GPIO_MODE_OUTPUT_AF_OD ||config->gpio_mode==GPIO_MODE_OUTPUT_AF_PP||config->gpio_mode== GPIO_MODE_OUTPUT_OD||config->gpio_mode==GPIO_MODE_OUTPUT_PP)
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d00b      	beq.n	80003e0 <mcal_gpio_init+0x64>
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	789b      	ldrb	r3, [r3, #2]
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d007      	beq.n	80003e0 <mcal_gpio_init+0x64>
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	789b      	ldrb	r3, [r3, #2]
 80003d4:	2b05      	cmp	r3, #5
 80003d6:	d003      	beq.n	80003e0 <mcal_gpio_init+0x64>
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	789b      	ldrb	r3, [r3, #2]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d10d      	bne.n	80003fc <mcal_gpio_init+0x80>
		{PIN_config = ((config->gpio_mode - 4)<<2 ) | ((config->gpio_speed) & (0X0F));}
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	789b      	ldrb	r3, [r3, #2]
 80003e4:	3b04      	subs	r3, #4
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	78db      	ldrb	r3, [r3, #3]
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	f003 030f 	and.w	r3, r3, #15
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	4313      	orrs	r3, r2
 80003f8:	81fb      	strh	r3, [r7, #14]
 80003fa:	e02f      	b.n	800045c <mcal_gpio_init+0xe0>


	else
	{
		if(config->gpio_mode==GPIO_MODE_ANALOG ||config->gpio_mode==GPIO_MODE_INPUT_FLO)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	789b      	ldrb	r3, [r3, #2]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d003      	beq.n	800040c <mcal_gpio_init+0x90>
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d104      	bne.n	8000416 <mcal_gpio_init+0x9a>
		{
			PIN_config=config->gpio_mode<<2;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	81fb      	strh	r3, [r7, #14]
 8000414:	e022      	b.n	800045c <mcal_gpio_init+0xe0>

		}
		else if(config->gpio_mode== GPIO_MODE_AF_INPUT)
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	2b08      	cmp	r3, #8
 800041c:	d102      	bne.n	8000424 <mcal_gpio_init+0xa8>
		{
			PIN_config=GPIO_MODE_INPUT_FLO<<2;
 800041e:	2304      	movs	r3, #4
 8000420:	81fb      	strh	r3, [r7, #14]
 8000422:	e01b      	b.n	800045c <mcal_gpio_init+0xe0>
		}
		else
		{

			PIN_config=GPIO_MODE_INPUT_PU<<2;
 8000424:	2308      	movs	r3, #8
 8000426:	81fb      	strh	r3, [r7, #14]
			if(config->gpio_mode == GPIO_MODE_INPUT_PU)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	789b      	ldrb	r3, [r3, #2]
 800042c:	2b02      	cmp	r3, #2
 800042e:	d108      	bne.n	8000442 <mcal_gpio_init+0xc6>
			{
				gpiox->ODR|=(config->gpio_pin_number);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	f9b2 2000 	ldrsh.w	r2, [r2]
 800043a:	431a      	orrs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	e00c      	b.n	800045c <mcal_gpio_init+0xe0>

			}
			else if(config->gpio_mode == GPIO_MODE_INPUT_PD)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d108      	bne.n	800045c <mcal_gpio_init+0xe0>
			{
				gpiox->ODR&=~(config->gpio_pin_number);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000454:	43d2      	mvns	r2, r2
 8000456:	401a      	ands	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	60da      	str	r2, [r3, #12]


	}


	*config_reg|=(PIN_config<<(get_pos(config->gpio_pin_number)*4));
 800045c:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff2d 	bl	80002c6 <get_pos>
 800046c:	4603      	mov	r3, r0
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	fa04 f203 	lsl.w	r2, r4, r3
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	431a      	orrs	r2, r3
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bd90      	pop	{r4, r7, pc}

08000486 <mcal_gpio_read_pin>:
//brief:read pins data
//param[in]:gpiox: to select port and pin
//param[in]:pin_number
//param[out]:pin status
char mcal_gpio_read_pin(GPIO *gpiox,unsigned short pin_number)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	807b      	strh	r3, [r7, #2]
	short bit_status;
	if( (gpiox->IDR & pin_number) !=0)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	887b      	ldrh	r3, [r7, #2]
 8000498:	4013      	ands	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <mcal_gpio_read_pin+0x1e>
	{
		bit_status=1;
 800049e:	2301      	movs	r3, #1
 80004a0:	81fb      	strh	r3, [r7, #14]
 80004a2:	e001      	b.n	80004a8 <mcal_gpio_read_pin+0x22>
	}
	else
		bit_status=0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	81fb      	strh	r3, [r7, #14]
	return bit_status;
 80004a8:	89fb      	ldrh	r3, [r7, #14]
 80004aa:	b2db      	uxtb	r3, r3
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <mcal_gpio_toggle_pin>:
	gpiox->ODR=val;
}


void mcal_gpio_toggle_pin(GPIO *gpiox,unsigned short pin_number)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	460b      	mov	r3, r1
 80004c0:	807b      	strh	r3, [r7, #2]
	gpiox->ODR^=pin_number;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	405a      	eors	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	60da      	str	r2, [r3, #12]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	2500      	movs	r5, #0
 80004dc:	4e0c      	ldr	r6, [pc, #48]	; (8000510 <__libc_init_array+0x38>)
 80004de:	4c0d      	ldr	r4, [pc, #52]	; (8000514 <__libc_init_array+0x3c>)
 80004e0:	1ba4      	subs	r4, r4, r6
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	f000 f81a 	bl	8000520 <_init>
 80004ec:	2500      	movs	r5, #0
 80004ee:	4e0a      	ldr	r6, [pc, #40]	; (8000518 <__libc_init_array+0x40>)
 80004f0:	4c0a      	ldr	r4, [pc, #40]	; (800051c <__libc_init_array+0x44>)
 80004f2:	1ba4      	subs	r4, r4, r6
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	42a5      	cmp	r5, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000500:	4798      	blx	r3
 8000502:	3501      	adds	r5, #1
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800050a:	4798      	blx	r3
 800050c:	3501      	adds	r5, #1
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000538 	.word	0x08000538
 8000514:	08000538 	.word	0x08000538
 8000518:	08000538 	.word	0x08000538
 800051c:	0800053c 	.word	0x0800053c

08000520 <_init>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr

0800052c <_fini>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr
