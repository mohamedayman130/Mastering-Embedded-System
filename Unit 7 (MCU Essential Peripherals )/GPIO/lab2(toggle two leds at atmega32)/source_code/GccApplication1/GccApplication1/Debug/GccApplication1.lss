
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f2  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e7  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fc  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:
#define GPIOB_DDR *(volatile int *)(GPIO_BASE + 0X17)
#define GPIOB_PIN *(volatile int *)(GPIO_BASE + 0X16)

void GPIO_INIT()
{
	GPIOA_DDR|=3<<0;//set pin A0 and A1 as an output
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	9b b3       	in	r25, 0x1b	; 27
  70:	83 60       	ori	r24, 0x03	; 3
  72:	9b bb       	out	0x1b, r25	; 27
  74:	8a bb       	out	0x1a, r24	; 26
	GPIOB_DDR&=~(3<<0);//set pin B0 and B1 as an input
  76:	87 b3       	in	r24, 0x17	; 23
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	8c 7f       	andi	r24, 0xFC	; 252
  7c:	98 bb       	out	0x18, r25	; 24
  7e:	87 bb       	out	0x17, r24	; 23
  80:	08 95       	ret

00000082 <wait>:
}

void wait(int x)
{
	
	for(int i=0;i<=x;i++)
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	0b c0       	rjmp	.+22     	; 0x9e <wait+0x1c>
	for(int y=0;y<=500;y++);
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	02 c0       	rjmp	.+4      	; 0x92 <wait+0x10>
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	25 3f       	cpi	r18, 0xF5	; 245
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	36 07       	cpc	r19, r22
  98:	bc f3       	brlt	.-18     	; 0x88 <wait+0x6>
}

void wait(int x)
{
	
	for(int i=0;i<=x;i++)
  9a:	4f 5f       	subi	r20, 0xFF	; 255
  9c:	5f 4f       	sbci	r21, 0xFF	; 255
  9e:	84 17       	cp	r24, r20
  a0:	95 07       	cpc	r25, r21
  a2:	ac f7       	brge	.-22     	; 0x8e <wait+0xc>
	for(int y=0;y<=500;y++);
}
  a4:	08 95       	ret

000000a6 <main>:
int main(void)
{
   GPIO_INIT();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>
    while (1) 
    {
		if( (GPIOB_PIN & 1<<0) !=0 )
  aa:	86 b3       	in	r24, 0x16	; 22
  ac:	97 b3       	in	r25, 0x17	; 23
  ae:	80 ff       	sbrs	r24, 0
  b0:	06 c0       	rjmp	.+12     	; 0xbe <main+0x18>
		GPIOA_PORT^=1<<0;
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	9c b3       	in	r25, 0x1c	; 28
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	82 27       	eor	r24, r18
  ba:	9c bb       	out	0x1c, r25	; 28
  bc:	8b bb       	out	0x1b, r24	; 27
		while(GPIOB_PIN & (1<<0));
  be:	86 b3       	in	r24, 0x16	; 22
  c0:	97 b3       	in	r25, 0x17	; 23
  c2:	80 fd       	sbrc	r24, 0
  c4:	fc cf       	rjmp	.-8      	; 0xbe <main+0x18>
		
		if( (GPIOB_PIN & 1<<1) !=0 )
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	97 b3       	in	r25, 0x17	; 23
  ca:	81 ff       	sbrs	r24, 1
  cc:	06 c0       	rjmp	.+12     	; 0xda <main+0x34>
		GPIOA_PORT^=1<<1;
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	9c b3       	in	r25, 0x1c	; 28
  d2:	22 e0       	ldi	r18, 0x02	; 2
  d4:	82 27       	eor	r24, r18
  d6:	9c bb       	out	0x1c, r25	; 28
  d8:	8b bb       	out	0x1b, r24	; 27
		wait(10);
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 41 00 	call	0x82	; 0x82 <wait>
    }
  e2:	e3 cf       	rjmp	.-58     	; 0xaa <main+0x4>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
