
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005da  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000534  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e9  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
			 for(int j=0;j<=500;j++);
		 }
	 }
int main(void)
{
    GPIO_DDRD|=0b1111 <<4;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	80 6f       	ori	r24, 0xF0	; 240
  72:	92 bb       	out	0x12, r25	; 18
  74:	81 bb       	out	0x11, r24	; 17
	GPIO_DDRD&=~(0B111<<0);
  76:	81 b3       	in	r24, 0x11	; 17
  78:	92 b3       	in	r25, 0x12	; 18
  7a:	88 7f       	andi	r24, 0xF8	; 248
  7c:	92 bb       	out	0x12, r25	; 18
  7e:	81 bb       	out	0x11, r24	; 17
	int i=4,k=0;
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	44 e0       	ldi	r20, 0x04	; 4
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
			}
			else if(k>=3)
			{
				GPIO_PORTD&=~(1<<i);
				k++;i--;
				if(k==6) k=0;
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
    GPIO_DDRD|=0b1111 <<4;
	GPIO_DDRD&=~(0B111<<0);
	int i=4,k=0;
    while (1) 
    {
		if( (GPIO_PIND & 1<<0) !=0 )
  8e:	80 b3       	in	r24, 0x10	; 16
  90:	91 b3       	in	r25, 0x11	; 17
  92:	80 ff       	sbrs	r24, 0
  94:	fc cf       	rjmp	.-8      	; 0x8e <main+0x22>
		{
			while(GPIO_PIND & 1<<0);
  96:	80 b3       	in	r24, 0x10	; 16
  98:	91 b3       	in	r25, 0x11	; 17
  9a:	80 fd       	sbrc	r24, 0
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x2a>
			if(k<3)
  9e:	23 30       	cpi	r18, 0x03	; 3
  a0:	31 05       	cpc	r19, r1
  a2:	9c f4       	brge	.+38     	; 0xca <main+0x5e>
			{
				k++;i++;
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
				GPIO_PORTD|=1<<i;
  ac:	62 b3       	in	r22, 0x12	; 18
  ae:	73 b3       	in	r23, 0x13	; 19
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	04 2e       	mov	r0, r20
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x4c>
  c0:	86 2b       	or	r24, r22
  c2:	97 2b       	or	r25, r23
  c4:	93 bb       	out	0x13, r25	; 19
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	e2 cf       	rjmp	.-60     	; 0x8e <main+0x22>
			}
			else if(k>=3)
  ca:	23 30       	cpi	r18, 0x03	; 3
  cc:	31 05       	cpc	r19, r1
  ce:	fc f2       	brlt	.-66     	; 0x8e <main+0x22>
			{
				GPIO_PORTD&=~(1<<i);
  d0:	62 b3       	in	r22, 0x12	; 18
  d2:	73 b3       	in	r23, 0x13	; 19
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	04 2e       	mov	r0, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x70>
  e4:	80 95       	com	r24
  e6:	90 95       	com	r25
  e8:	86 23       	and	r24, r22
  ea:	97 23       	and	r25, r23
  ec:	93 bb       	out	0x13, r25	; 19
  ee:	82 bb       	out	0x12, r24	; 18
				k++;i--;
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	51 09       	sbc	r21, r1
				if(k==6) k=0;
  f8:	26 30       	cpi	r18, 0x06	; 6
  fa:	31 05       	cpc	r19, r1
  fc:	41 f6       	brne	.-112    	; 0x8e <main+0x22>
  fe:	c5 cf       	rjmp	.-118    	; 0x8a <main+0x1e>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
