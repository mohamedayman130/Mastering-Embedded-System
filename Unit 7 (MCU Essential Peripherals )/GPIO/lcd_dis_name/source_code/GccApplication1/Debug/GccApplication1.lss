
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099a  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d9  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000322  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  7a:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <kick>:
#define RW_SWITCH 2
#define EN_SWITCH 3

void kick()
{
	LCD_CTR|=1<<EN_SWITCH;
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTR&=~(1<<EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <lcd_write_command>:
}
void lcd_write_command(char command)
{
	LCD_PORT =command;
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	9c bb       	out	0x1c, r25	; 28
  a0:	8b bb       	out	0x1b, r24	; 27
	LCD_CTR &=~(1<<RS_SWITCH);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	88 bb       	out	0x18, r24	; 24
	LCD_CTR &=~(1<<RW_SWITCH);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_write_command+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_write_command+0x1c>
  b8:	00 00       	nop
	_delay_ms(1);
	kick();
  ba:	0e 94 41 00 	call	0x82	; 0x82 <kick>
  be:	08 95       	ret

000000c0 <LCD_clear_screen>:
}
void LCD_clear_screen(){
	lcd_write_command(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
  c6:	08 95       	ret

000000c8 <lcd_write_char>:
}
void lcd_write_char(char text)
{
	LCD_PORT =text;
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9c bb       	out	0x1c, r25	; 28
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTR |=(1<<RS_SWITCH);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	88 bb       	out	0x18, r24	; 24
	LCD_CTR &=~(1<<RW_SWITCH);
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	88 bb       	out	0x18, r24	; 24
	//_delay_ms(1);
	kick();
  da:	0e 94 41 00 	call	0x82	; 0x82 <kick>
  de:	08 95       	ret

000000e0 <set_pos>:
	
}
void set_pos(char row,char col)
{
	if(row==0)
  e0:	81 11       	cpse	r24, r1
  e2:	05 c0       	rjmp	.+10     	; 0xee <set_pos+0xe>
	lcd_write_command(0x80 +col);
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	86 0f       	add	r24, r22
  e8:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
  ec:	08 95       	ret
	else if(row==1)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	21 f4       	brne	.+8      	; 0xfa <set_pos+0x1a>
	lcd_write_command(0xc0 +col);
  f2:	80 ec       	ldi	r24, 0xC0	; 192
  f4:	86 0f       	add	r24, r22
  f6:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
  fa:	08 95       	ret

000000fc <LCD_WRITE_STRING>:
}
void LCD_WRITE_STRING(char * text,char row,char col)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	86 2f       	mov	r24, r22
	set_pos(row,col);
 104:	64 2f       	mov	r22, r20
 106:	0e 94 70 00 	call	0xe0	; 0xe0 <set_pos>
	while(*text !='\0')
 10a:	03 c0       	rjmp	.+6      	; 0x112 <LCD_WRITE_STRING+0x16>
	{
		lcd_write_char(*text);
 10c:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_write_char>
		text++;
 110:	21 96       	adiw	r28, 0x01	; 1
	lcd_write_command(0xc0 +col);
}
void LCD_WRITE_STRING(char * text,char row,char col)
{
	set_pos(row,col);
	while(*text !='\0')
 112:	88 81       	ld	r24, Y
 114:	81 11       	cpse	r24, r1
 116:	fa cf       	rjmp	.-12     	; 0x10c <LCD_WRITE_STRING+0x10>
	{
		lcd_write_char(*text);
		text++;
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <lcd_init>:
void lcd_init()
{
     GPIO_DDRB=0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	98 bb       	out	0x18, r25	; 24
 124:	87 bb       	out	0x17, r24	; 23
	 GPIO_DDRA=0XFF;
 126:	9b bb       	out	0x1b, r25	; 27
 128:	8a bb       	out	0x1a, r24	; 26
	LCD_CTR &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	81 7f       	andi	r24, 0xF1	; 241
 12e:	88 bb       	out	0x18, r24	; 24
 130:	87 e8       	ldi	r24, 0x87	; 135
 132:	93 e1       	ldi	r25, 0x13	; 19
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x16>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x1c>
 13a:	00 00       	nop
	_delay_ms(20);
	LCD_clear_screen();
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_clear_screen>
	lcd_write_command(0x38);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
	lcd_write_command(0x80);
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
	lcd_write_command(0x0e);
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
 152:	08 95       	ret

00000154 <main>:
	
}

int main(void)
{
	lcd_init();
 154:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_init>
	LCD_WRITE_STRING("mohamed",0,5);
 158:	45 e0       	ldi	r20, 0x05	; 5
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_WRITE_STRING>
	LCD_WRITE_STRING("ayman",1,6);
 164:	46 e0       	ldi	r20, 0x06	; 6
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	88 e6       	ldi	r24, 0x68	; 104
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_WRITE_STRING>
	lcd_write_command(0x0c);
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
	int count=1;
 176:	c1 e0       	ldi	r28, 0x01	; 1
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0x2c>
		}
		else if(count<=19)
		{count++;
			lcd_write_command(0x18);
			_delay_ms(50);
			if(count>=19) count=1;
 17c:	c1 e0       	ldi	r28, 0x01	; 1
 17e:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_WRITE_STRING("ayman",1,6);
	lcd_write_command(0x0c);
	int count=1;
	while (1)
	{
		if(count<=5)
 180:	c6 30       	cpi	r28, 0x06	; 6
 182:	d1 05       	cpc	r29, r1
 184:	5c f4       	brge	.+22     	; 0x19c <main+0x48>
		{count++;
 186:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_command(0x18);
 188:	88 e1       	ldi	r24, 0x18	; 24
 18a:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x3e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x44>
 198:	00 00       	nop
 19a:	f2 cf       	rjmp	.-28     	; 0x180 <main+0x2c>
		_delay_ms(50);
		}
		else if(count<=14)
 19c:	cf 30       	cpi	r28, 0x0F	; 15
 19e:	d1 05       	cpc	r29, r1
 1a0:	5c f4       	brge	.+22     	; 0x1b8 <main+0x64>
		{
			count++;
 1a2:	21 96       	adiw	r28, 0x01	; 1
			lcd_write_command(0x1c);
 1a4:	8c e1       	ldi	r24, 0x1C	; 28
 1a6:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
 1aa:	83 ed       	ldi	r24, 0xD3	; 211
 1ac:	90 e3       	ldi	r25, 0x30	; 48
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x5a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x60>
 1b4:	00 00       	nop
 1b6:	e4 cf       	rjmp	.-56     	; 0x180 <main+0x2c>
			_delay_ms(50);
		}
		else if(count<=19)
 1b8:	c4 31       	cpi	r28, 0x14	; 20
 1ba:	d1 05       	cpc	r29, r1
 1bc:	0c f7       	brge	.-62     	; 0x180 <main+0x2c>
		{count++;
 1be:	21 96       	adiw	r28, 0x01	; 1
			lcd_write_command(0x18);
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_write_command>
 1c6:	83 ed       	ldi	r24, 0xD3	; 211
 1c8:	90 e3       	ldi	r25, 0x30	; 48
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x76>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x7c>
 1d0:	00 00       	nop
			_delay_ms(50);
			if(count>=19) count=1;
 1d2:	c3 31       	cpi	r28, 0x13	; 19
 1d4:	d1 05       	cpc	r29, r1
 1d6:	94 f6       	brge	.-92     	; 0x17c <main+0x28>
 1d8:	d3 cf       	rjmp	.-90     	; 0x180 <main+0x2c>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
