
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f8  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f9  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d2  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000096  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:
void wait(int x)
{
	
	for(int i=0;i<=x;i++)
	for(int y=0;y<=500;y++);
}
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	9b b3       	in	r25, 0x1b	; 27
  70:	8f 67       	ori	r24, 0x7F	; 127
  72:	9b bb       	out	0x1b, r25	; 27
  74:	8a bb       	out	0x1a, r24	; 26
  76:	08 95       	ret

00000078 <main>:
int main(void)
{
   GPIO_INIT();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>
   int i=-1,k=-1;
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	3f ef       	ldi	r19, 0xFF	; 255
  80:	4f ef       	ldi	r20, 0xFF	; 255
  82:	5f ef       	ldi	r21, 0xFF	; 255
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x12>
			 }
		else if(k>=6 && k<13)
		     {
			GPIOA_PORT&=~(1<<i);
			k++;i--;
			if(k==13) k=-1;
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	3f ef       	ldi	r19, 0xFF	; 255
{
   GPIO_INIT();
   int i=-1,k=-1;
    while(1)
    {
		if( (GPIOA_PIN & 1<<7) !=0 )
  8a:	89 b3       	in	r24, 0x19	; 25
  8c:	9a b3       	in	r25, 0x1a	; 26
  8e:	87 ff       	sbrs	r24, 7
  90:	fc cf       	rjmp	.-8      	; 0x8a <main+0x12>
		{
			while(GPIOA_PIN & 1<<7);
  92:	89 b3       	in	r24, 0x19	; 25
  94:	9a b3       	in	r25, 0x1a	; 26
  96:	87 fd       	sbrc	r24, 7
  98:	fc cf       	rjmp	.-8      	; 0x92 <main+0x1a>
		if(k<6)
  9a:	26 30       	cpi	r18, 0x06	; 6
  9c:	31 05       	cpc	r19, r1
  9e:	9c f4       	brge	.+38     	; 0xc6 <main+0x4e>
		     {
				    k++;i++;
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
			 GPIOA_PORT|=1<<i;
  a8:	6b b3       	in	r22, 0x1b	; 27
  aa:	7c b3       	in	r23, 0x1c	; 28
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	04 2e       	mov	r0, r20
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x40>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x3c>
  bc:	86 2b       	or	r24, r22
  be:	97 2b       	or	r25, r23
  c0:	9c bb       	out	0x1c, r25	; 28
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	e2 cf       	rjmp	.-60     	; 0x8a <main+0x12>
			 }
		else if(k>=6 && k<13)
  c6:	c9 01       	movw	r24, r18
  c8:	06 97       	sbiw	r24, 0x06	; 6
  ca:	07 97       	sbiw	r24, 0x07	; 7
  cc:	f0 f6       	brcc	.-68     	; 0x8a <main+0x12>
		     {
			GPIOA_PORT&=~(1<<i);
  ce:	6b b3       	in	r22, 0x1b	; 27
  d0:	7c b3       	in	r23, 0x1c	; 28
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	04 2e       	mov	r0, r20
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x66>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <main+0x62>
  e2:	80 95       	com	r24
  e4:	90 95       	com	r25
  e6:	86 23       	and	r24, r22
  e8:	97 23       	and	r25, r23
  ea:	9c bb       	out	0x1c, r25	; 28
  ec:	8b bb       	out	0x1b, r24	; 27
			k++;i--;
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	51 09       	sbc	r21, r1
			if(k==13) k=-1;
  f6:	2d 30       	cpi	r18, 0x0D	; 13
  f8:	31 05       	cpc	r19, r1
  fa:	39 f6       	brne	.-114    	; 0x8a <main+0x12>
  fc:	c4 cf       	rjmp	.-120    	; 0x86 <main+0xe>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
