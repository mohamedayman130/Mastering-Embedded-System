
slave-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000755  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000616  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000332  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000375  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000eb  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  74:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <spi_init>:
#include <util/delay.h>
#include <avr/io.h>

void spi_init()
{
	DDRB=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<5 |1<<4 |1<<7);
  80:	87 b3       	in	r24, 0x17	; 23
  82:	8f 74       	andi	r24, 0x4F	; 79
  84:	87 bb       	out	0x17, r24	; 23
	SPCR|=1<<6;
  86:	8d b1       	in	r24, 0x0d	; 13
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8d b9       	out	0x0d, r24	; 13
  8c:	08 95       	ret

0000008e <send_rec_data>:
//}


uint8_t send_rec_data(char data)
{
	SPDR = data;
  8e:	8f b9       	out	0x0f, r24	; 15
	while(!(1<<7 & SPSR));
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <send_rec_data+0x2>
	return SPDR;
  94:	8f b1       	in	r24, 0x0f	; 15
}
  96:	08 95       	ret

00000098 <uart_init>:
void uart_init()
{
	DDRD&=~(1<<0);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	81 bb       	out	0x11, r24	; 17
	UBRRL=103;
  9e:	87 e6       	ldi	r24, 0x67	; 103
  a0:	89 b9       	out	0x09, r24	; 9
	UCSRB|=1<<4;
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <uart_rec>:
}

uint8_t uart_rec()
{
	if((UCSRA & 1<<7))
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <uart_rec+0x8>
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
  b0:	08 95       	ret
	return 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
}
  b4:	08 95       	ret

000000b6 <main>:
	//}
	//return 0;
//}
int main(void)
{
	DDRA=0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xff;
  ba:	84 bb       	out	0x14, r24	; 20
	uart_init();
  bc:	0e 94 4c 00 	call	0x98	; 0x98 <uart_init>
	spi_init();
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <spi_init>
	while (1)
	{
		uint8_t uart_recevrd_data=uart_rec();
  c4:	0e 94 55 00 	call	0xaa	; 0xaa <uart_rec>
  c8:	c8 2f       	mov	r28, r24
		if(uart_recevrd_data)
  ca:	88 23       	and	r24, r24
  cc:	81 f0       	breq	.+32     	; 0xee <main+0x38>
		{
			if(uart_counter==0)
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	81 11       	cpse	r24, r1
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x26>
			send_rec_data(1);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 47 00 	call	0x8e	; 0x8e <send_rec_data>
			send_rec_data(uart_recevrd_data);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 47 00 	call	0x8e	; 0x8e <send_rec_data>
			uart_counter++;
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTA=uart_recevrd_data;
  ec:	cb bb       	out	0x1b, r28	; 27
		}
		uint8_t spi_receved_data=send_rec_data(0xff);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	0e 94 47 00 	call	0x8e	; 0x8e <send_rec_data>
		if(spi_receved_data==1)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f4       	brne	.+36     	; 0x11c <main+0x66>
		{PORTC|=1<<0;_delay_ms(3000);PORTC&=~(1<<0);uart_counter=0;}
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	8b e7       	ldi	r24, 0x7B	; 123
 102:	92 e9       	ldi	r25, 0x92	; 146
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x4e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x58>
 10e:	00 00       	nop
 110:	85 b3       	in	r24, 0x15	; 21
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	85 bb       	out	0x15, r24	; 21
 116:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <main+0xe>
		else if(spi_receved_data==2)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	91 f6       	brne	.-92     	; 0xc4 <main+0xe>
		{PORTC|=1<<1;_delay_ms(3000);PORTC&=~(1<<1);uart_counter=0;}
 120:	85 b3       	in	r24, 0x15	; 21
 122:	82 60       	ori	r24, 0x02	; 2
 124:	85 bb       	out	0x15, r24	; 21
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8b e7       	ldi	r24, 0x7B	; 123
 12a:	92 e9       	ldi	r25, 0x92	; 146
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x76>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x80>
 136:	00 00       	nop
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	c0 cf       	rjmp	.-128    	; 0xc4 <main+0xe>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
