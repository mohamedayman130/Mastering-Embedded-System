
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000a7c  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  008000b0  008000b0  00000b60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fc  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d48  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5c  00000000  00000000  00004321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 15 03 	call	0x62a	; 0x62a <main>
  8a:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <eeprom_init>:
  92:	87 b3       	in	r24, 0x17	; 23
  94:	88 60       	ori	r24, 0x08	; 8
  96:	87 bb       	out	0x17, r24	; 23
  98:	08 95       	ret

0000009a <eeprom_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	c6 2f       	mov	r28, r22
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	87 7f       	andi	r24, 0xF7	; 247
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	88 bb       	out	0x18, r24	; 24
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
  c6:	8d 2f       	mov	r24, r29
  c8:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <eeprom_write+0x42>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <eeprom_write+0x48>
  e2:	00 00       	nop
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <eeprom_read>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	98 60       	ori	r25, 0x08	; 8
 110:	98 bb       	out	0x18, r25	; 24
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <eeprom_send_7_bytes>:
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	27 97       	sbiw	r28, 0x07	; 7
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	12 c0       	rjmp	.+36     	; 0x158 <eeprom_send_7_bytes+0x42>
 134:	2a e0       	ldi	r18, 0x0A	; 10
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__udivmodsi4>
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e1 0f       	add	r30, r17
 14a:	f1 1d       	adc	r31, r1
 14c:	60 83       	st	Z, r22
 14e:	62 2f       	mov	r22, r18
 150:	73 2f       	mov	r23, r19
 152:	84 2f       	mov	r24, r20
 154:	95 2f       	mov	r25, r21
 156:	1f 5f       	subi	r17, 0xFF	; 255
 158:	61 15       	cp	r22, r1
 15a:	71 05       	cpc	r23, r1
 15c:	81 05       	cpc	r24, r1
 15e:	91 05       	cpc	r25, r1
 160:	49 f7       	brne	.-46     	; 0x134 <eeprom_send_7_bytes+0x1e>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 75 00 	call	0xea	; 0xea <eeprom_read>
 168:	f8 2e       	mov	r15, r24
 16a:	ff 0c       	add	r15, r15
 16c:	ff 0c       	add	r15, r15
 16e:	ff 0c       	add	r15, r15
 170:	f8 1a       	sub	r15, r24
 172:	8f 2d       	mov	r24, r15
 174:	0f 2e       	mov	r0, r31
 176:	f4 e1       	ldi	r31, 0x14	; 20
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
 17c:	f8 0e       	add	r15, r24
 17e:	0f 2d       	mov	r16, r15
 180:	0c c0       	rjmp	.+24     	; 0x19a <eeprom_send_7_bytes+0x84>
 182:	11 50       	subi	r17, 0x01	; 1
 184:	e1 e0       	ldi	r30, 0x01	; 1
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ec 0f       	add	r30, r28
 18a:	fd 1f       	adc	r31, r29
 18c:	e1 0f       	add	r30, r17
 18e:	f1 1d       	adc	r31, r1
 190:	60 81       	ld	r22, Z
 192:	80 2f       	mov	r24, r16
 194:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write>
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	20 2f       	mov	r18, r16
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	8f 2d       	mov	r24, r15
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	06 96       	adiw	r24, 0x06	; 6
 1a4:	82 17       	cp	r24, r18
 1a6:	93 07       	cpc	r25, r19
 1a8:	64 f7       	brge	.-40     	; 0x182 <eeprom_send_7_bytes+0x6c>
 1aa:	27 96       	adiw	r28, 0x07	; 7
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	08 95       	ret

000001c2 <eeprom_read_7_bytes>:
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	d8 2f       	mov	r29, r24
 1d0:	c8 2f       	mov	r28, r24
 1d2:	c1 2c       	mov	r12, r1
 1d4:	d1 2c       	mov	r13, r1
 1d6:	76 01       	movw	r14, r12
 1d8:	1a c0       	rjmp	.+52     	; 0x20e <eeprom_read_7_bytes+0x4c>
 1da:	8c 2f       	mov	r24, r28
 1dc:	0e 94 75 00 	call	0xea	; 0xea <eeprom_read>
 1e0:	cc 0c       	add	r12, r12
 1e2:	dd 1c       	adc	r13, r13
 1e4:	ee 1c       	adc	r14, r14
 1e6:	ff 1c       	adc	r15, r15
 1e8:	b7 01       	movw	r22, r14
 1ea:	a6 01       	movw	r20, r12
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	66 1f       	adc	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	66 1f       	adc	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	c4 0e       	add	r12, r20
 1fe:	d5 1e       	adc	r13, r21
 200:	e6 1e       	adc	r14, r22
 202:	f7 1e       	adc	r15, r23
 204:	c8 0e       	add	r12, r24
 206:	d1 1c       	adc	r13, r1
 208:	e1 1c       	adc	r14, r1
 20a:	f1 1c       	adc	r15, r1
 20c:	cf 5f       	subi	r28, 0xFF	; 255
 20e:	2c 2f       	mov	r18, r28
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	8d 2f       	mov	r24, r29
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	06 96       	adiw	r24, 0x06	; 6
 218:	82 17       	cp	r24, r18
 21a:	93 07       	cpc	r25, r19
 21c:	f4 f6       	brge	.-68     	; 0x1da <eeprom_read_7_bytes+0x18>
 21e:	c7 01       	movw	r24, r14
 220:	b6 01       	movw	r22, r12
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	08 95       	ret

00000230 <KEYBAD_INIT>:
 230:	84 b3       	in	r24, 0x14	; 20
 232:	8f 60       	ori	r24, 0x0F	; 15
 234:	84 bb       	out	0x14, r24	; 20
 236:	84 b3       	in	r24, 0x14	; 20
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	84 bb       	out	0x14, r24	; 20
 23c:	15 ba       	out	0x15, r1	; 21
 23e:	08 95       	ret

00000240 <get_key>:
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	7a c0       	rjmp	.+244    	; 0x33a <get_key+0xfa>
 246:	15 ba       	out	0x15, r1	; 21
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	06 2e       	mov	r0, r22
 250:	02 c0       	rjmp	.+4      	; 0x256 <get_key+0x16>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <get_key+0x12>
 25a:	82 2b       	or	r24, r18
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <get_key+0x22>
 266:	00 c0       	rjmp	.+0      	; 0x268 <get_key+0x28>
 268:	00 00       	nop
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	5f c0       	rjmp	.+190    	; 0x32e <get_key+0xee>
 270:	83 b3       	in	r24, 0x13	; 19
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	04 2e       	mov	r0, r20
 278:	02 c0       	rjmp	.+4      	; 0x27e <get_key+0x3e>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <get_key+0x3a>
 282:	22 95       	swap	r18
 284:	32 95       	swap	r19
 286:	30 7f       	andi	r19, 0xF0	; 240
 288:	32 27       	eor	r19, r18
 28a:	20 7f       	andi	r18, 0xF0	; 240
 28c:	32 27       	eor	r19, r18
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	82 23       	and	r24, r18
 292:	93 23       	and	r25, r19
 294:	89 2b       	or	r24, r25
 296:	09 f4       	brne	.+2      	; 0x29a <get_key+0x5a>
 298:	48 c0       	rjmp	.+144    	; 0x32a <get_key+0xea>
 29a:	83 b3       	in	r24, 0x13	; 19
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	82 23       	and	r24, r18
 2a0:	93 23       	and	r25, r19
 2a2:	89 2b       	or	r24, r25
 2a4:	d1 f7       	brne	.-12     	; 0x29a <get_key+0x5a>
 2a6:	61 30       	cpi	r22, 0x01	; 1
 2a8:	71 05       	cpc	r23, r1
 2aa:	c9 f0       	breq	.+50     	; 0x2de <get_key+0x9e>
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <get_key+0x76>
 2ae:	61 15       	cp	r22, r1
 2b0:	71 05       	cpc	r23, r1
 2b2:	41 f0       	breq	.+16     	; 0x2c4 <get_key+0x84>
 2b4:	3a c0       	rjmp	.+116    	; 0x32a <get_key+0xea>
 2b6:	62 30       	cpi	r22, 0x02	; 2
 2b8:	71 05       	cpc	r23, r1
 2ba:	f1 f0       	breq	.+60     	; 0x2f8 <get_key+0xb8>
 2bc:	63 30       	cpi	r22, 0x03	; 3
 2be:	71 05       	cpc	r23, r1
 2c0:	41 f1       	breq	.+80     	; 0x312 <get_key+0xd2>
 2c2:	33 c0       	rjmp	.+102    	; 0x32a <get_key+0xea>
 2c4:	41 15       	cp	r20, r1
 2c6:	51 05       	cpc	r21, r1
 2c8:	f1 f1       	breq	.+124    	; 0x346 <get_key+0x106>
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	51 05       	cpc	r21, r1
 2ce:	e9 f1       	breq	.+122    	; 0x34a <get_key+0x10a>
 2d0:	42 30       	cpi	r20, 0x02	; 2
 2d2:	51 05       	cpc	r21, r1
 2d4:	e1 f1       	breq	.+120    	; 0x34e <get_key+0x10e>
 2d6:	43 30       	cpi	r20, 0x03	; 3
 2d8:	51 05       	cpc	r21, r1
 2da:	39 f5       	brne	.+78     	; 0x32a <get_key+0xea>
 2dc:	3a c0       	rjmp	.+116    	; 0x352 <get_key+0x112>
 2de:	41 15       	cp	r20, r1
 2e0:	51 05       	cpc	r21, r1
 2e2:	c9 f1       	breq	.+114    	; 0x356 <get_key+0x116>
 2e4:	41 30       	cpi	r20, 0x01	; 1
 2e6:	51 05       	cpc	r21, r1
 2e8:	c1 f1       	breq	.+112    	; 0x35a <get_key+0x11a>
 2ea:	42 30       	cpi	r20, 0x02	; 2
 2ec:	51 05       	cpc	r21, r1
 2ee:	b9 f1       	breq	.+110    	; 0x35e <get_key+0x11e>
 2f0:	43 30       	cpi	r20, 0x03	; 3
 2f2:	51 05       	cpc	r21, r1
 2f4:	d1 f4       	brne	.+52     	; 0x32a <get_key+0xea>
 2f6:	35 c0       	rjmp	.+106    	; 0x362 <get_key+0x122>
 2f8:	41 15       	cp	r20, r1
 2fa:	51 05       	cpc	r21, r1
 2fc:	a1 f1       	breq	.+104    	; 0x366 <get_key+0x126>
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	51 05       	cpc	r21, r1
 302:	99 f1       	breq	.+102    	; 0x36a <get_key+0x12a>
 304:	42 30       	cpi	r20, 0x02	; 2
 306:	51 05       	cpc	r21, r1
 308:	91 f1       	breq	.+100    	; 0x36e <get_key+0x12e>
 30a:	43 30       	cpi	r20, 0x03	; 3
 30c:	51 05       	cpc	r21, r1
 30e:	69 f4       	brne	.+26     	; 0x32a <get_key+0xea>
 310:	30 c0       	rjmp	.+96     	; 0x372 <get_key+0x132>
 312:	41 15       	cp	r20, r1
 314:	51 05       	cpc	r21, r1
 316:	79 f1       	breq	.+94     	; 0x376 <get_key+0x136>
 318:	41 30       	cpi	r20, 0x01	; 1
 31a:	51 05       	cpc	r21, r1
 31c:	71 f1       	breq	.+92     	; 0x37a <get_key+0x13a>
 31e:	42 30       	cpi	r20, 0x02	; 2
 320:	51 05       	cpc	r21, r1
 322:	69 f1       	breq	.+90     	; 0x37e <get_key+0x13e>
 324:	43 30       	cpi	r20, 0x03	; 3
 326:	51 05       	cpc	r21, r1
 328:	61 f1       	breq	.+88     	; 0x382 <get_key+0x142>
 32a:	4f 5f       	subi	r20, 0xFF	; 255
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	44 30       	cpi	r20, 0x04	; 4
 330:	51 05       	cpc	r21, r1
 332:	0c f4       	brge	.+2      	; 0x336 <get_key+0xf6>
 334:	9d cf       	rjmp	.-198    	; 0x270 <get_key+0x30>
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	64 30       	cpi	r22, 0x04	; 4
 33c:	71 05       	cpc	r23, r1
 33e:	0c f4       	brge	.+2      	; 0x342 <get_key+0x102>
 340:	82 cf       	rjmp	.-252    	; 0x246 <get_key+0x6>
 342:	8e e4       	ldi	r24, 0x4E	; 78
 344:	08 95       	ret
 346:	87 e3       	ldi	r24, 0x37	; 55
 348:	08 95       	ret
 34a:	88 e3       	ldi	r24, 0x38	; 56
 34c:	08 95       	ret
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	08 95       	ret
 352:	8f e2       	ldi	r24, 0x2F	; 47
 354:	08 95       	ret
 356:	84 e3       	ldi	r24, 0x34	; 52
 358:	08 95       	ret
 35a:	85 e3       	ldi	r24, 0x35	; 53
 35c:	08 95       	ret
 35e:	86 e3       	ldi	r24, 0x36	; 54
 360:	08 95       	ret
 362:	8a e2       	ldi	r24, 0x2A	; 42
 364:	08 95       	ret
 366:	81 e3       	ldi	r24, 0x31	; 49
 368:	08 95       	ret
 36a:	82 e3       	ldi	r24, 0x32	; 50
 36c:	08 95       	ret
 36e:	83 e3       	ldi	r24, 0x33	; 51
 370:	08 95       	ret
 372:	8d e2       	ldi	r24, 0x2D	; 45
 374:	08 95       	ret
 376:	83 e6       	ldi	r24, 0x63	; 99
 378:	08 95       	ret
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	08 95       	ret
 37e:	8d e3       	ldi	r24, 0x3D	; 61
 380:	08 95       	ret
 382:	8b e2       	ldi	r24, 0x2B	; 43
 384:	08 95       	ret

00000386 <LCD_ENABLE>:
 386:	8b b3       	in	r24, 0x1b	; 27
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	97 e2       	ldi	r25, 0x27	; 39
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_ENABLE+0xa>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_ENABLE+0x10>
 396:	00 00       	nop
 398:	8b b3       	in	r24, 0x1b	; 27
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	8b bb       	out	0x1b, r24	; 27
 39e:	08 95       	ret

000003a0 <LCD_WRITE_COMMAND>:
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	9c 2f       	mov	r25, r28
 3aa:	90 7f       	andi	r25, 0xF0	; 240
 3ac:	89 2b       	or	r24, r25
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	8b b3       	in	r24, 0x1b	; 27
 3b2:	8d 7f       	andi	r24, 0xFD	; 253
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	8b b3       	in	r24, 0x1b	; 27
 3b8:	8b 7f       	andi	r24, 0xFB	; 251
 3ba:	8b bb       	out	0x1b, r24	; 27
 3bc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_ENABLE>
 3c0:	2b b3       	in	r18, 0x1b	; 27
 3c2:	30 e1       	ldi	r19, 0x10	; 16
 3c4:	c3 9f       	mul	r28, r19
 3c6:	c0 01       	movw	r24, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	92 2f       	mov	r25, r18
 3cc:	9f 70       	andi	r25, 0x0F	; 15
 3ce:	89 2b       	or	r24, r25
 3d0:	8b bb       	out	0x1b, r24	; 27
 3d2:	8b b3       	in	r24, 0x1b	; 27
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	8b b3       	in	r24, 0x1b	; 27
 3da:	8b 7f       	andi	r24, 0xFB	; 251
 3dc:	8b bb       	out	0x1b, r24	; 27
 3de:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_ENABLE>
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <SET_CURSOR>:
 3e6:	81 11       	cpse	r24, r1
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <SET_CURSOR+0x12>
 3ea:	60 31       	cpi	r22, 0x10	; 16
 3ec:	88 f4       	brcc	.+34     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	86 0f       	add	r24, r22
 3f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 3f6:	08 95       	ret
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	39 f4       	brne	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	60 31       	cpi	r22, 0x10	; 16
 3fe:	40 f4       	brcc	.+16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 400:	80 ec       	ldi	r24, 0xC0	; 192
 402:	86 0f       	add	r24, r22
 404:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 408:	08 95       	ret
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 410:	08 95       	ret

00000412 <LCD_WRITE_CHAR>:
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
 416:	8b b3       	in	r24, 0x1b	; 27
 418:	8f 70       	andi	r24, 0x0F	; 15
 41a:	9c 2f       	mov	r25, r28
 41c:	90 7f       	andi	r25, 0xF0	; 240
 41e:	89 2b       	or	r24, r25
 420:	8b bb       	out	0x1b, r24	; 27
 422:	8b b3       	in	r24, 0x1b	; 27
 424:	8d 7f       	andi	r24, 0xFD	; 253
 426:	8b bb       	out	0x1b, r24	; 27
 428:	8b b3       	in	r24, 0x1b	; 27
 42a:	84 60       	ori	r24, 0x04	; 4
 42c:	8b bb       	out	0x1b, r24	; 27
 42e:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_ENABLE>
 432:	2b b3       	in	r18, 0x1b	; 27
 434:	30 e1       	ldi	r19, 0x10	; 16
 436:	c3 9f       	mul	r28, r19
 438:	c0 01       	movw	r24, r0
 43a:	11 24       	eor	r1, r1
 43c:	92 2f       	mov	r25, r18
 43e:	9f 70       	andi	r25, 0x0F	; 15
 440:	89 2b       	or	r24, r25
 442:	8b bb       	out	0x1b, r24	; 27
 444:	8b b3       	in	r24, 0x1b	; 27
 446:	8d 7f       	andi	r24, 0xFD	; 253
 448:	8b bb       	out	0x1b, r24	; 27
 44a:	8b b3       	in	r24, 0x1b	; 27
 44c:	84 60       	ori	r24, 0x04	; 4
 44e:	8b bb       	out	0x1b, r24	; 27
 450:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_ENABLE>
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <LCD_WRITE_STRING>:
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
 45e:	03 c0       	rjmp	.+6      	; 0x466 <LCD_WRITE_STRING+0xe>
 460:	21 96       	adiw	r28, 0x01	; 1
 462:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_CHAR>
 466:	88 81       	ld	r24, Y
 468:	81 11       	cpse	r24, r1
 46a:	fa cf       	rjmp	.-12     	; 0x460 <LCD_WRITE_STRING+0x8>
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <lcd_clear_screen>:
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 478:	08 95       	ret

0000047a <LCD_INIT>:
 47a:	87 ea       	ldi	r24, 0xA7	; 167
 47c:	91 e6       	ldi	r25, 0x61	; 97
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_INIT+0x4>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_INIT+0xa>
 484:	00 00       	nop
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	8a bb       	out	0x1a, r24	; 26
 48a:	8b b3       	in	r24, 0x1b	; 27
 48c:	88 7f       	andi	r24, 0xF8	; 248
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_ENABLE>
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 49a:	8e e0       	ldi	r24, 0x0E	; 14
 49c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 4a0:	88 e2       	ldi	r24, 0x28	; 40
 4a2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_COMMAND>
 4ac:	08 95       	ret

000004ae <lcd_write_num>:
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	a8 97       	sbiw	r28, 0x28	; 40
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	fe 01       	movw	r30, r28
 4c6:	31 96       	adiw	r30, 0x01	; 1
 4c8:	28 e2       	ldi	r18, 0x28	; 40
 4ca:	df 01       	movw	r26, r30
 4cc:	1d 92       	st	X+, r1
 4ce:	2a 95       	dec	r18
 4d0:	e9 f7       	brne	.-6      	; 0x4cc <lcd_write_num+0x1e>
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	12 c0       	rjmp	.+36     	; 0x4fa <lcd_write_num+0x4c>
 4d6:	2a e0       	ldi	r18, 0x0A	; 10
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	0e 94 1a 05 	call	0xa34	; 0xa34 <__udivmodsi4>
 4e2:	e1 e0       	ldi	r30, 0x01	; 1
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ec 0f       	add	r30, r28
 4e8:	fd 1f       	adc	r31, r29
 4ea:	e1 0f       	add	r30, r17
 4ec:	f1 1d       	adc	r31, r1
 4ee:	60 83       	st	Z, r22
 4f0:	62 2f       	mov	r22, r18
 4f2:	73 2f       	mov	r23, r19
 4f4:	84 2f       	mov	r24, r20
 4f6:	95 2f       	mov	r25, r21
 4f8:	1f 5f       	subi	r17, 0xFF	; 255
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	81 05       	cpc	r24, r1
 500:	91 05       	cpc	r25, r1
 502:	49 f7       	brne	.-46     	; 0x4d6 <lcd_write_num+0x28>
 504:	0b c0       	rjmp	.+22     	; 0x51c <lcd_write_num+0x6e>
 506:	11 50       	subi	r17, 0x01	; 1
 508:	e1 e0       	ldi	r30, 0x01	; 1
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ec 0f       	add	r30, r28
 50e:	fd 1f       	adc	r31, r29
 510:	e1 0f       	add	r30, r17
 512:	f1 1d       	adc	r31, r1
 514:	80 81       	ld	r24, Z
 516:	80 5d       	subi	r24, 0xD0	; 208
 518:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_CHAR>
 51c:	11 11       	cpse	r17, r1
 51e:	f3 cf       	rjmp	.-26     	; 0x506 <lcd_write_num+0x58>
 520:	a8 96       	adiw	r28, 0x28	; 40
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	08 95       	ret

00000534 <power_cut>:
	uint8_t real_num_of_Cars,car_state,flag,first_five,cut_off;
	uint8_t spi_data,number_of_id,id_counter;
	uint32_t ids[10],idssssssssss[10];///up to 140 element///////////////////////////////////////////////////////////////////////

void power_cut()
{
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
	uint8_t id_eeprom=eeprom_read(0x00);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 75 00 	call	0xea	; 0xea <eeprom_read>
 544:	f8 2e       	mov	r15, r24
	real_num_of_Cars=eeprom_read(0x01);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 75 00 	call	0xea	; 0xea <eeprom_read>
 54c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <real_num_of_Cars>
	PORTD=real_num_of_Cars;
 550:	82 bb       	out	0x12, r24	; 18
	LCD_WRITE_STRING("power cut off");
 552:	84 e6       	ldi	r24, 0x64	; 100
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
	uint8_t id_prog=0,counter=0;
	number_of_id=id_eeprom;
 55a:	f0 92 12 01 	sts	0x0112, r15	; 0x800112 <number_of_id>
{
	uint8_t id_eeprom=eeprom_read(0x00);
	real_num_of_Cars=eeprom_read(0x01);
	PORTD=real_num_of_Cars;
	LCD_WRITE_STRING("power cut off");
	uint8_t id_prog=0,counter=0;
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
	number_of_id=id_eeprom;
	while(id_eeprom>id_prog)
 562:	29 c0       	rjmp	.+82     	; 0x5b6 <power_cut+0x82>
	{
		//ids[counter++]=eeprom_read_7_bytes(id_prog++*7+20);//this is original program
		idssssssssss[counter]=eeprom_read_7_bytes(id_prog++*7+20);/////////////////////////////////////////////////////////////power cut simulation
 564:	c1 2f       	mov	r28, r17
 566:	d0 e0       	ldi	r29, 0x00	; 0
 568:	01 e0       	ldi	r16, 0x01	; 1
 56a:	09 0f       	add	r16, r25
 56c:	89 2f       	mov	r24, r25
 56e:	88 0f       	add	r24, r24
 570:	88 0f       	add	r24, r24
 572:	88 0f       	add	r24, r24
 574:	89 1b       	sub	r24, r25
 576:	8c 5e       	subi	r24, 0xEC	; 236
 578:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <eeprom_read_7_bytes>
 57c:	cc 0f       	add	r28, r28
 57e:	dd 1f       	adc	r29, r29
 580:	cc 0f       	add	r28, r28
 582:	dd 1f       	adc	r29, r29
 584:	c7 52       	subi	r28, 0x27	; 39
 586:	df 4f       	sbci	r29, 0xFF	; 255
 588:	68 83       	st	Y, r22
 58a:	79 83       	std	Y+1, r23	; 0x01
 58c:	8a 83       	std	Y+2, r24	; 0x02
 58e:	9b 83       	std	Y+3, r25	; 0x03
		lcd_clear_screen();lcd_write_num(idssssssssss[counter++]);_delay_ms(1000);////power cut simulation
 590:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 594:	1f 5f       	subi	r17, 0xFF	; 255
 596:	68 81       	ld	r22, Y
 598:	79 81       	ldd	r23, Y+1	; 0x01
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	9b 81       	ldd	r25, Y+3	; 0x03
 59e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_num>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	83 ed       	ldi	r24, 0xD3	; 211
 5a6:	90 e3       	ldi	r25, 0x30	; 48
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <power_cut+0x74>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <power_cut+0x7e>
 5b2:	00 00       	nop
	uint8_t id_prog=0,counter=0;
	number_of_id=id_eeprom;
	while(id_eeprom>id_prog)
	{
		//ids[counter++]=eeprom_read_7_bytes(id_prog++*7+20);//this is original program
		idssssssssss[counter]=eeprom_read_7_bytes(id_prog++*7+20);/////////////////////////////////////////////////////////////power cut simulation
 5b4:	90 2f       	mov	r25, r16
	real_num_of_Cars=eeprom_read(0x01);
	PORTD=real_num_of_Cars;
	LCD_WRITE_STRING("power cut off");
	uint8_t id_prog=0,counter=0;
	number_of_id=id_eeprom;
	while(id_eeprom>id_prog)
 5b6:	9f 15       	cp	r25, r15
 5b8:	a8 f2       	brcs	.-86     	; 0x564 <power_cut+0x30>
	{
		//ids[counter++]=eeprom_read_7_bytes(id_prog++*7+20);//this is original program
		idssssssssss[counter]=eeprom_read_7_bytes(id_prog++*7+20);/////////////////////////////////////////////////////////////power cut simulation
		lcd_clear_screen();lcd_write_num(idssssssssss[counter++]);_delay_ms(1000);////power cut simulation
	}
lcd_clear_screen();LCD_WRITE_STRING("enter pass::>> ");SET_CURSOR(1,0);////power cut simulation
 5ba:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 5be:	82 e7       	ldi	r24, 0x72	; 114
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SET_CURSOR>
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	08 95       	ret

000005da <check_pass>:

	uint8_t check_pass()
	{
 5da:	0f 93       	push	r16
 5dc:	1f 93       	push	r17
	uint32_t temp= enterd_id;
 5de:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <enterd_id>
 5e2:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <enterd_id+0x1>
 5e6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <enterd_id+0x2>
 5ea:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <enterd_id+0x3>
	for (uint8_t i=0;i<number_of_id;i++)
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	12 c0       	rjmp	.+36     	; 0x616 <check_pass+0x3c>
	{
	if(ids[i]==temp) return 1;
 5f2:	e8 2f       	mov	r30, r24
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	e0 55       	subi	r30, 0x50	; 80
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	40 81       	ld	r20, Z
 604:	51 81       	ldd	r21, Z+1	; 0x01
 606:	62 81       	ldd	r22, Z+2	; 0x02
 608:	73 81       	ldd	r23, Z+3	; 0x03
 60a:	04 17       	cp	r16, r20
 60c:	15 07       	cpc	r17, r21
 60e:	26 07       	cpc	r18, r22
 610:	37 07       	cpc	r19, r23
 612:	39 f0       	breq	.+14     	; 0x622 <check_pass+0x48>
}

	uint8_t check_pass()
	{
	uint32_t temp= enterd_id;
	for (uint8_t i=0;i<number_of_id;i++)
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <number_of_id>
 61a:	89 17       	cp	r24, r25
 61c:	50 f3       	brcs	.-44     	; 0x5f2 <check_pass+0x18>
	{
	if(ids[i]==temp) return 1;
	}
	return 0;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	01 c0       	rjmp	.+2      	; 0x624 <check_pass+0x4a>
	uint8_t check_pass()
	{
	uint32_t temp= enterd_id;
	for (uint8_t i=0;i<number_of_id;i++)
	{
	if(ids[i]==temp) return 1;
 622:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
	}
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <main>:


	int main(void)
	{
	LCD_INIT();
 62a:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_INIT>
	spi_init();
 62e:	0e 94 08 05 	call	0xa10	; 0xa10 <spi_init>
	eeprom_init();
 632:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_init>
	KEYBAD_INIT();
 636:	0e 94 18 01 	call	0x230	; 0x230 <KEYBAD_INIT>
	DDRD=0XFF;
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	81 bb       	out	0x11, r24	; 17
	PORTD=real_num_of_Cars;
 63e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <real_num_of_Cars>
 642:	82 bb       	out	0x12, r24	; 18
		
		eeprom_write(0x00,0);//burn this value in this location one time only by another hex
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write>
		eeprom_write(0x01,3);//burn this value in this location one time only by another hex
 64c:	63 e0       	ldi	r22, 0x03	; 3
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write>
		power_cut();
 654:	0e 94 9a 02 	call	0x534	; 0x534 <power_cut>
	while (1)
	{
		//lcd admin pass
		if(counter==3){//change it number of digit password
 658:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter>
 65c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <counter+0x1>
 660:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <counter+0x2>
 664:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <counter+0x3>
 668:	03 97       	sbiw	r24, 0x03	; 3
 66a:	a1 05       	cpc	r26, r1
 66c:	b1 05       	cpc	r27, r1
 66e:	09 f0       	breq	.+2      	; 0x672 <main+0x48>
 670:	b6 c0       	rjmp	.+364    	; 0x7de <main+0x1b4>
			counter=0;
 672:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter>
 676:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <counter+0x1>
 67a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <counter+0x2>
 67e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <counter+0x3>
			if(enterd_pass==real_pass) 
 682:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <enterd_pass>
 686:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <enterd_pass+0x1>
 68a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <enterd_pass+0x2>
 68e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <enterd_pass+0x3>
 692:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 696:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 69a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 69e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6a2:	48 17       	cp	r20, r24
 6a4:	59 07       	cpc	r21, r25
 6a6:	6a 07       	cpc	r22, r26
 6a8:	7b 07       	cpc	r23, r27
 6aa:	09 f0       	breq	.+2      	; 0x6ae <main+0x84>
 6ac:	77 c0       	rjmp	.+238    	; 0x79c <main+0x172>
			{
				lcd_clear_screen();LCD_WRITE_STRING("true");_delay_ms(1000);
 6ae:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 6b2:	82 e8       	ldi	r24, 0x82	; 130
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	83 ed       	ldi	r24, 0xD3	; 211
 6be:	90 e3       	ldi	r25, 0x30	; 48
 6c0:	21 50       	subi	r18, 0x01	; 1
 6c2:	80 40       	sbci	r24, 0x00	; 0
 6c4:	90 40       	sbci	r25, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <main+0x96>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <main+0xa0>
 6ca:	00 00       	nop
			lcd_clear_screen();LCD_WRITE_STRING("enter new id");SET_CURSOR(1,0);
 6cc:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 6d0:	87 e8       	ldi	r24, 0x87	; 135
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SET_CURSOR>
			uint8_t id_inc=0;uint32_t new_id=0;
 6e0:	c1 2c       	mov	r12, r1
 6e2:	d1 2c       	mov	r13, r1
 6e4:	76 01       	movw	r14, r12
 6e6:	d0 e0       	ldi	r29, 0x00	; 0
			while(id_inc<=6)
 6e8:	25 c0       	rjmp	.+74     	; 0x734 <main+0x10a>
			{
				char x=get_key();
 6ea:	0e 94 20 01 	call	0x240	; 0x240 <get_key>
 6ee:	c8 2f       	mov	r28, r24
				switch(x)
 6f0:	8e 34       	cpi	r24, 0x4E	; 78
 6f2:	01 f1       	breq	.+64     	; 0x734 <main+0x10a>
				{
					case 'N':break;
					default: {LCD_WRITE_CHAR(x);new_id=(x-48)+new_id*10;id_inc++;}
 6f4:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_CHAR>
 6f8:	8c 2f       	mov	r24, r28
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	c0 97       	sbiw	r24, 0x30	; 48
 6fe:	09 2e       	mov	r0, r25
 700:	00 0c       	add	r0, r0
 702:	aa 0b       	sbc	r26, r26
 704:	bb 0b       	sbc	r27, r27
 706:	cc 0c       	add	r12, r12
 708:	dd 1c       	adc	r13, r13
 70a:	ee 1c       	adc	r14, r14
 70c:	ff 1c       	adc	r15, r15
 70e:	b7 01       	movw	r22, r14
 710:	a6 01       	movw	r20, r12
 712:	44 0f       	add	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	44 0f       	add	r20, r20
 71c:	55 1f       	adc	r21, r21
 71e:	66 1f       	adc	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	c4 0e       	add	r12, r20
 724:	d5 1e       	adc	r13, r21
 726:	e6 1e       	adc	r14, r22
 728:	f7 1e       	adc	r15, r23
 72a:	c8 0e       	add	r12, r24
 72c:	d9 1e       	adc	r13, r25
 72e:	ea 1e       	adc	r14, r26
 730:	fb 1e       	adc	r15, r27
 732:	df 5f       	subi	r29, 0xFF	; 255
			if(enterd_pass==real_pass) 
			{
				lcd_clear_screen();LCD_WRITE_STRING("true");_delay_ms(1000);
			lcd_clear_screen();LCD_WRITE_STRING("enter new id");SET_CURSOR(1,0);
			uint8_t id_inc=0;uint32_t new_id=0;
			while(id_inc<=6)
 734:	d7 30       	cpi	r29, 0x07	; 7
 736:	c8 f2       	brcs	.-78     	; 0x6ea <main+0xc0>
				{
					case 'N':break;
					default: {LCD_WRITE_CHAR(x);new_id=(x-48)+new_id*10;id_inc++;}
				}
			}
			ids[number_of_id++]=new_id;
 738:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <number_of_id>
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	8e 0f       	add	r24, r30
 740:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <number_of_id>
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	e0 55       	subi	r30, 0x50	; 80
 750:	ff 4f       	sbci	r31, 0xFF	; 255
 752:	c0 82       	st	Z, r12
 754:	d1 82       	std	Z+1, r13	; 0x01
 756:	e2 82       	std	Z+2, r14	; 0x02
 758:	f3 82       	std	Z+3, r15	; 0x03
			
			
			eeprom_send_7_bytes(new_id);
 75a:	c7 01       	movw	r24, r14
 75c:	b6 01       	movw	r22, r12
 75e:	0e 94 8b 00 	call	0x116	; 0x116 <eeprom_send_7_bytes>
			lcd_clear_screen();
 762:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
			LCD_WRITE_STRING("id ");lcd_write_num(new_id);SET_CURSOR(1,0);
 766:	84 e9       	ldi	r24, 0x94	; 148
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 76e:	c7 01       	movw	r24, r14
 770:	b6 01       	movw	r22, r12
 772:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_num>
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SET_CURSOR>
			LCD_WRITE_STRING("is added");eeprom_write(0x00,number_of_id);
 77e:	88 e9       	ldi	r24, 0x98	; 152
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 786:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <number_of_id>
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write>
			cut_off+=1;////power cut simulation
 790:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cut_off>
 794:	8f 5f       	subi	r24, 0xFF	; 255
 796:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cut_off>
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <main+0x17e>
				}
			else{lcd_clear_screen();LCD_WRITE_STRING("try again");}
 79c:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 7a0:	81 ea       	ldi	r24, 0xA1	; 161
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 7a8:	2f ef       	ldi	r18, 0xFF	; 255
 7aa:	83 ed       	ldi	r24, 0xD3	; 211
 7ac:	90 e3       	ldi	r25, 0x30	; 48
 7ae:	21 50       	subi	r18, 0x01	; 1
 7b0:	80 40       	sbci	r24, 0x00	; 0
 7b2:	90 40       	sbci	r25, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0x184>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <main+0x18e>
 7b8:	00 00       	nop
			_delay_ms(1000);lcd_clear_screen();
 7ba:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
			LCD_WRITE_STRING("enter pass::>> ");SET_CURSOR(1,0);enterd_pass=0;
 7be:	82 e7       	ldi	r24, 0x72	; 114
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SET_CURSOR>
 7ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <enterd_pass>
 7d2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <enterd_pass+0x1>
 7d6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <enterd_pass+0x2>
 7da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <enterd_pass+0x3>
		}
		
		char x=get_key();
 7de:	0e 94 20 01 	call	0x240	; 0x240 <get_key>
 7e2:	c8 2f       	mov	r28, r24
		switch(x)
 7e4:	8e 34       	cpi	r24, 0x4E	; 78
 7e6:	09 f4       	brne	.+2      	; 0x7ea <main+0x1c0>
 7e8:	43 c0       	rjmp	.+134    	; 0x870 <__stack+0x11>
		{
			case 'N': break;
			default: {LCD_WRITE_CHAR('*');enterd_pass=(x-48)+enterd_pass*10;counter++;}
 7ea:	8a e2       	ldi	r24, 0x2A	; 42
 7ec:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_CHAR>
 7f0:	8c 2f       	mov	r24, r28
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	c0 97       	sbiw	r24, 0x30	; 48
 7f6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <enterd_pass>
 7fa:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <enterd_pass+0x1>
 7fe:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <enterd_pass+0x2>
 802:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <enterd_pass+0x3>
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	66 1f       	adc	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	6a 01       	movw	r12, r20
 810:	7b 01       	movw	r14, r22
 812:	cc 0c       	add	r12, r12
 814:	dd 1c       	adc	r13, r13
 816:	ee 1c       	adc	r14, r14
 818:	ff 1c       	adc	r15, r15
 81a:	cc 0c       	add	r12, r12
 81c:	dd 1c       	adc	r13, r13
 81e:	ee 1c       	adc	r14, r14
 820:	ff 1c       	adc	r15, r15
 822:	4c 0d       	add	r20, r12
 824:	5d 1d       	adc	r21, r13
 826:	6e 1d       	adc	r22, r14
 828:	7f 1d       	adc	r23, r15
 82a:	09 2e       	mov	r0, r25
 82c:	00 0c       	add	r0, r0
 82e:	aa 0b       	sbc	r26, r26
 830:	bb 0b       	sbc	r27, r27
 832:	84 0f       	add	r24, r20
 834:	95 1f       	adc	r25, r21
 836:	a6 1f       	adc	r26, r22
 838:	b7 1f       	adc	r27, r23
 83a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <enterd_pass>
 83e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <enterd_pass+0x1>
 842:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <enterd_pass+0x2>
 846:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <enterd_pass+0x3>
 84a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter>
 84e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <counter+0x1>
 852:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <counter+0x2>
 856:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <counter+0x3>
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	a1 1d       	adc	r26, r1
 85e:	b1 1d       	adc	r27, r1
 860:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter>
 864:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <counter+0x1>
 868:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <counter+0x2>
 86c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <counter+0x3>
		}
		////////to not concatinate between two gates spi id you can send to another spi a busy state like delay function to not accept any id when another take id
		///spi
		uint8_t spi_master_rec=send_rec_data(0xff);
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	0e 94 11 05 	call	0xa22	; 0xa22 <send_rec_data>
 876:	28 2f       	mov	r18, r24
			if(spi_master_rec ==16)
 878:	80 31       	cpi	r24, 0x10	; 16
 87a:	51 f4       	brne	.+20     	; 0x890 <__stack+0x31>
			{car_state++;LCD_WRITE_STRING("busy");}
 87c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <car_state>
 880:	8f 5f       	subi	r24, 0xFF	; 255
 882:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <car_state>
 886:	8b ea       	ldi	r24, 0xAB	; 171
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 88e:	44 c0       	rjmp	.+136    	; 0x918 <__stack+0xb9>
			else if(spi_master_rec ==17)
 890:	81 31       	cpi	r24, 0x11	; 17
 892:	51 f4       	brne	.+20     	; 0x8a8 <__stack+0x49>
			{car_state+=2;LCD_WRITE_STRING("busy");}
 894:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <car_state>
 898:	8e 5f       	subi	r24, 0xFE	; 254
 89a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <car_state>
 89e:	8b ea       	ldi	r24, 0xAB	; 171
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 8a6:	38 c0       	rjmp	.+112    	; 0x918 <__stack+0xb9>
			else if(spi_master_rec) 
 8a8:	88 23       	and	r24, r24
 8aa:	b1 f1       	breq	.+108    	; 0x918 <__stack+0xb9>
			{
				if(spi_master_rec !=128)//128 for char send space???? ??? ???? ?????? 
 8ac:	80 38       	cpi	r24, 0x80	; 128
 8ae:	a1 f1       	breq	.+104    	; 0x918 <__stack+0xb9>
				{
				//if(first_five !=0){///for simulation error
				enterd_id=enterd_id*10+(spi_master_rec-48);
 8b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <enterd_id>
 8b4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <enterd_id+0x1>
 8b8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <enterd_id+0x2>
 8bc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <enterd_id+0x3>
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	aa 1f       	adc	r26, r26
 8c6:	bb 1f       	adc	r27, r27
 8c8:	6c 01       	movw	r12, r24
 8ca:	7d 01       	movw	r14, r26
 8cc:	cc 0c       	add	r12, r12
 8ce:	dd 1c       	adc	r13, r13
 8d0:	ee 1c       	adc	r14, r14
 8d2:	ff 1c       	adc	r15, r15
 8d4:	cc 0c       	add	r12, r12
 8d6:	dd 1c       	adc	r13, r13
 8d8:	ee 1c       	adc	r14, r14
 8da:	ff 1c       	adc	r15, r15
 8dc:	ac 01       	movw	r20, r24
 8de:	bd 01       	movw	r22, r26
 8e0:	4c 0d       	add	r20, r12
 8e2:	5d 1d       	adc	r21, r13
 8e4:	6e 1d       	adc	r22, r14
 8e6:	7f 1d       	adc	r23, r15
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	c9 01       	movw	r24, r18
 8ec:	c0 97       	sbiw	r24, 0x30	; 48
 8ee:	09 2e       	mov	r0, r25
 8f0:	00 0c       	add	r0, r0
 8f2:	aa 0b       	sbc	r26, r26
 8f4:	bb 0b       	sbc	r27, r27
 8f6:	84 0f       	add	r24, r20
 8f8:	95 1f       	adc	r25, r21
 8fa:	a6 1f       	adc	r26, r22
 8fc:	b7 1f       	adc	r27, r23
 8fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <enterd_id>
 902:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <enterd_id+0x1>
 906:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <enterd_id+0x2>
 90a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <enterd_id+0x3>
				//LCD_WRITE_CHAR(spi_master_rec);/////////////////////////////////////////////////////////
				id_counter++;
 90e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <id_counter>
 912:	8f 5f       	subi	r24, 0xFF	; 255
 914:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <id_counter>
				//}
				//first_five=1;
				}
			}
		
			if(id_counter ==7){
 918:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <id_counter>
 91c:	87 30       	cpi	r24, 0x07	; 7
 91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0xc3>
 920:	6c c0       	rjmp	.+216    	; 0x9fa <__stack+0x19b>
				flag=check_pass();
 922:	0e 94 ed 02 	call	0x5da	; 0x5da <check_pass>
 926:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag>
				
		if(flag==1 && car_state==1) {
 92a:	81 30       	cpi	r24, 0x01	; 1
 92c:	a9 f4       	brne	.+42     	; 0x958 <__stack+0xf9>
 92e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <car_state>
 932:	91 30       	cpi	r25, 0x01	; 1
 934:	89 f4       	brne	.+34     	; 0x958 <__stack+0xf9>
			real_num_of_Cars--;
 936:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <real_num_of_Cars>
 93a:	81 50       	subi	r24, 0x01	; 1
 93c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <real_num_of_Cars>
			if(real_num_of_Cars>=0 && real_num_of_Cars<=3){
 940:	84 30       	cpi	r24, 0x04	; 4
 942:	20 f4       	brcc	.+8      	; 0x94c <__stack+0xed>
			spi_send_data(10);}
 944:	8a e0       	ldi	r24, 0x0A	; 10
 946:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
 94a:	31 c0       	rjmp	.+98     	; 0x9ae <__stack+0x14f>
			else {real_num_of_Cars=0;spi_send_data(12);}
 94c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <real_num_of_Cars>
 950:	8c e0       	ldi	r24, 0x0C	; 12
 952:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
 956:	2b c0       	rjmp	.+86     	; 0x9ae <__stack+0x14f>
			}
		else if(flag==0 && car_state==1) {spi_send_data(11);}
 958:	81 11       	cpse	r24, r1
 95a:	08 c0       	rjmp	.+16     	; 0x96c <__stack+0x10d>
 95c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <car_state>
 960:	91 30       	cpi	r25, 0x01	; 1
 962:	21 f4       	brne	.+8      	; 0x96c <__stack+0x10d>
 964:	8b e0       	ldi	r24, 0x0B	; 11
 966:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
 96a:	21 c0       	rjmp	.+66     	; 0x9ae <__stack+0x14f>
		else if(flag==1 && car_state==2) {
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	b1 f4       	brne	.+44     	; 0x99c <__stack+0x13d>
 970:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <car_state>
 974:	92 30       	cpi	r25, 0x02	; 2
 976:	91 f4       	brne	.+36     	; 0x99c <__stack+0x13d>
			real_num_of_Cars++;
 978:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <real_num_of_Cars>
 97c:	8f 5f       	subi	r24, 0xFF	; 255
 97e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <real_num_of_Cars>
			if(real_num_of_Cars<=3 && real_num_of_Cars>=0){
 982:	84 30       	cpi	r24, 0x04	; 4
 984:	20 f4       	brcc	.+8      	; 0x98e <__stack+0x12f>
			spi_send_data(13);}
 986:	8d e0       	ldi	r24, 0x0D	; 13
 988:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
 98c:	10 c0       	rjmp	.+32     	; 0x9ae <__stack+0x14f>
			else {real_num_of_Cars=3;spi_send_data(15);}//not important case 
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <real_num_of_Cars>
 994:	8f e0       	ldi	r24, 0x0F	; 15
 996:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <__stack+0x14f>
		}
		else if(flag==0 && car_state==2) {spi_send_data(14);}
 99c:	81 11       	cpse	r24, r1
 99e:	07 c0       	rjmp	.+14     	; 0x9ae <__stack+0x14f>
 9a0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <car_state>
 9a4:	82 30       	cpi	r24, 0x02	; 2
 9a6:	19 f4       	brne	.+6      	; 0x9ae <__stack+0x14f>
 9a8:	8e e0       	ldi	r24, 0x0E	; 14
 9aa:	0e 94 16 05 	call	0xa2c	; 0xa2c <spi_send_data>
		
		
		enterd_id=0;car_state=0;flag=0;id_counter=0;
 9ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <enterd_id>
 9b2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <enterd_id+0x1>
 9b6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <enterd_id+0x2>
 9ba:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <enterd_id+0x3>
 9be:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <car_state>
 9c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag>
 9c6:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <id_counter>
				//_delay_ms(1000);//you can delet delay now 
				lcd_clear_screen();LCD_WRITE_STRING("enter pass::>> ");SET_CURSOR(1,0);PORTD=real_num_of_Cars;eeprom_write(0x01,real_num_of_Cars);LCD_WRITE_CHAR(eeprom_read(0x01)+48);
 9ca:	0e 94 39 02 	call	0x472	; 0x472 <lcd_clear_screen>
 9ce:	82 e7       	ldi	r24, 0x72	; 114
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_WRITE_STRING>
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SET_CURSOR>
 9de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <real_num_of_Cars>
 9e2:	82 bb       	out	0x12, r24	; 18
 9e4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <real_num_of_Cars>
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	0e 94 75 00 	call	0xea	; 0xea <eeprom_read>
 9f4:	80 5d       	subi	r24, 0xD0	; 208
 9f6:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_CHAR>
				}
				
				
				
				if(cut_off==2)////power cut simulation
 9fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cut_off>
 9fe:	82 30       	cpi	r24, 0x02	; 2
 a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x1a5>
 a02:	2a ce       	rjmp	.-940    	; 0x658 <main+0x2e>
				{
					power_cut();
 a04:	0e 94 9a 02 	call	0x534	; 0x534 <power_cut>
					cut_off=3;
 a08:	83 e0       	ldi	r24, 0x03	; 3
 a0a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cut_off>
 a0e:	24 ce       	rjmp	.-952    	; 0x658 <main+0x2e>

00000a10 <spi_init>:
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	87 bb       	out	0x17, r24	; 23
 a14:	87 b3       	in	r24, 0x17	; 23
 a16:	8f 7b       	andi	r24, 0xBF	; 191
 a18:	87 bb       	out	0x17, r24	; 23
 a1a:	8d b1       	in	r24, 0x0d	; 13
 a1c:	80 6d       	ori	r24, 0xD0	; 208
 a1e:	8d b9       	out	0x0d, r24	; 13
 a20:	08 95       	ret

00000a22 <send_rec_data>:
 a22:	8f b9       	out	0x0f, r24	; 15
 a24:	77 9b       	sbis	0x0e, 7	; 14
 a26:	fe cf       	rjmp	.-4      	; 0xa24 <send_rec_data+0x2>
 a28:	8f b1       	in	r24, 0x0f	; 15
 a2a:	08 95       	ret

00000a2c <spi_send_data>:
 a2c:	8f b9       	out	0x0f, r24	; 15
 a2e:	77 9b       	sbis	0x0e, 7	; 14
 a30:	fe cf       	rjmp	.-4      	; 0xa2e <spi_send_data+0x2>
 a32:	08 95       	ret

00000a34 <__udivmodsi4>:
 a34:	a1 e2       	ldi	r26, 0x21	; 33
 a36:	1a 2e       	mov	r1, r26
 a38:	aa 1b       	sub	r26, r26
 a3a:	bb 1b       	sub	r27, r27
 a3c:	fd 01       	movw	r30, r26
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <__udivmodsi4_ep>

00000a40 <__udivmodsi4_loop>:
 a40:	aa 1f       	adc	r26, r26
 a42:	bb 1f       	adc	r27, r27
 a44:	ee 1f       	adc	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	a2 17       	cp	r26, r18
 a4a:	b3 07       	cpc	r27, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__udivmodsi4_ep>
 a52:	a2 1b       	sub	r26, r18
 a54:	b3 0b       	sbc	r27, r19
 a56:	e4 0b       	sbc	r30, r20
 a58:	f5 0b       	sbc	r31, r21

00000a5a <__udivmodsi4_ep>:
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	1a 94       	dec	r1
 a64:	69 f7       	brne	.-38     	; 0xa40 <__udivmodsi4_loop>
 a66:	60 95       	com	r22
 a68:	70 95       	com	r23
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	9b 01       	movw	r18, r22
 a70:	ac 01       	movw	r20, r24
 a72:	bd 01       	movw	r22, r26
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
